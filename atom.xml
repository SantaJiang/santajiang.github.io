<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Santa的博客</title>
  
  
  <link href="https://santajiang.github.io/atom.xml" rel="self"/>
  
  <link href="https://santajiang.github.io/"/>
  <updated>2021-12-23T09:33:41.148Z</updated>
  <id>https://santajiang.github.io/</id>
  
  <author>
    <name>蒋胜达</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MacOS下Qt调用终端(Terminal)</title>
    <link href="https://santajiang.github.io/2021/12/23/MacOS%E4%B8%8BQt%E8%B0%83%E7%94%A8Terminal%E7%BB%88%E7%AB%AF/"/>
    <id>https://santajiang.github.io/2021/12/23/MacOS%E4%B8%8BQt%E8%B0%83%E7%94%A8Terminal%E7%BB%88%E7%AB%AF/</id>
    <published>2021-12-22T16:00:00.000Z</published>
    <updated>2021-12-23T09:33:41.148Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到了一个贼郁闷的问题，就是怎么在MacOS下用Qt调起终端，并执行一些命令，在网上怎么都查不到方法，说什么的都有，就是没有管用的  </p><p>自己在多次尝试后终于找到了解决方案，其实很简单，直接上代码:  </p><figure class="highlight qt"><table><tr><td class="code"><pre><span class="line">#include &lt;QProcess&gt;</span><br><span class="line"></span><br><span class="line">QProcess pCmd = <span class="keyword">new</span> QProcess(<span class="keyword">this</span>);</span><br><span class="line">connect(pCmd , SIGNAL(readyReadStandardOutput()) , <span class="keyword">this</span> , SLOT(on_readoutput()));</span><br><span class="line">connect(pCmd , SIGNAL(readyReadStandardError()) , <span class="keyword">this</span> , SLOT(on_readerror()));</span><br><span class="line"></span><br><span class="line">pCmd-&gt;start(<span class="string">&quot;bash&quot;</span>);</span><br><span class="line">pCmd-&gt;waitForStarted();</span><br><span class="line"></span><br><span class="line">QString strTermCmd = <span class="string">&quot;git add -A&quot;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">pCmd-&gt;write(strTermCmd.toUtf8().data());</span><br><span class="line">pCmd-&gt;waitForFinished();</span><br></pre></td></tr></table></figure><p>问题的关键就在这个<code>pCmd-&gt;start(&quot;bash&quot;);</code> ,其实早就该想到填bash的，被网上的各种文章误导，还试了好久的open命令，浪费人生，在此做个记录吧 =_=</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天遇到了一个贼郁闷的问题，就是怎么在MacOS下用Qt调起终端，并执行一些命令，在网上怎么都查不到方法，说什么的都有，就是没有管用的  &lt;/p&gt;
&lt;p&gt;自己在多次尝试后终于找到了解决方案，其实很简单，直接上代码:  &lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="Macos" scheme="https://santajiang.github.io/tags/Macos/"/>
    
  </entry>
  
  <entry>
    <title>RGB值与十六进制颜色值转换工具</title>
    <link href="https://santajiang.github.io/2021/12/19/RGB%E5%80%BC%E4%B8%8E%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E9%A2%9C%E8%89%B2%E5%80%BC%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7/"/>
    <id>https://santajiang.github.io/2021/12/19/RGB%E5%80%BC%E4%B8%8E%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E9%A2%9C%E8%89%B2%E5%80%BC%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7/</id>
    <published>2021-12-18T16:00:00.000Z</published>
    <updated>2021-12-23T09:35:08.420Z</updated>
    
    <content type="html"><![CDATA[<p>平时在开发时经常会遇到RGB值和十六进制颜色互转的场景，平时都是用在线的网页端，每次麻烦不说，最近页面也开始到处插入广告了，既然想着功能也不大，就自己实现一个吧</p><span id="more"></span><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>首先贴上这个项目的GitHub地址：<a href="https://github.com/SantaJiang/ColorConv">https://github.com/SantaJiang/ColorConv</a><br>项目的首页有软件的截图，欢迎来点Star</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>页面是画了两个QLineEdit和一个QLabel，就构成了所有的要素，按钮我也不准备加，之前网页端的那个每次填好之后都得点个转换，很麻烦o(╥_╥)o.既然想到这一步了，我想干脆回车直接生成结果，而且生成的结果自动的复制到剪贴板里，那就省事多了，我总共需要做的就是：输入-回车-粘贴到IDE里，就完了.</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>做起来也是比较简单的，回车生效的事件直接用的是QLineEdit自带的returnPressed()事件，而复制到剪贴板用到的是QClipboard类，用法也是很简单：  </p><figure class="highlight qt"><table><tr><td class="code"><pre><span class="line">#include &lt;QClipboard&gt;</span><br><span class="line"></span><br><span class="line">QString str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">QClipboard *clip = <span class="attribute">QApplication</span>::clipboard();</span><br><span class="line">clip-&gt;setText(str);</span><br></pre></td></tr></table></figure><p>这样这个”Hello”就自动复制到剪贴板里了.  </p><p>接下来最主要的就是颜色值的相互转换了，可以里用QColor类，先获取对应的color，然后再转换为对应的显示形式，这里贴上核心代码：  </p><figure class="highlight qt"><table><tr><td class="code"><pre><span class="line">#include &lt;QColor&gt;</span><br><span class="line"></span><br><span class="line">QColor <span class="built_in">color</span>(<span class="number">235</span>,<span class="number">235</span>,<span class="number">235</span>);</span><br><span class="line"><span class="built_in">int</span> red = <span class="built_in">color</span>.red();</span><br><span class="line"><span class="built_in">int</span> green = <span class="built_in">color</span>.green();</span><br><span class="line"><span class="built_in">int</span> blue = <span class="built_in">color</span>.blue();</span><br><span class="line">QString strRed = QString(<span class="string">&quot;%1&quot;</span>).arg(red &amp; <span class="number">0xFF</span>, <span class="number">2</span>, <span class="number">16</span>, QLatin1Char(<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">QString strGreen = QString(<span class="string">&quot;%1&quot;</span>).arg(green &amp; <span class="number">0xFF</span>, <span class="number">2</span>, <span class="number">16</span>, QLatin1Char(<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">QString strBlue = QString(<span class="string">&quot;%1&quot;</span>).arg(blue &amp; <span class="number">0xFF</span>, <span class="number">2</span>, <span class="number">16</span>, QLatin1Char(<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//十六进制显示</span></span><br><span class="line">QString hex = QString(<span class="string">&quot;#%1%2%3&quot;</span>).arg(strRed.toUpper()).arg(strGreen.toUpper()).arg(strBlue.toUpper());</span><br><span class="line"><span class="comment">//RGB显示</span></span><br><span class="line">QString rgb = QString(<span class="string">&quot;%1, %2, %3&quot;</span>).arg(red).arg(green).arg(blue);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;平时在开发时经常会遇到RGB值和十六进制颜色互转的场景，平时都是用在线的网页端，每次麻烦不说，最近页面也开始到处插入广告了，既然想着功能也不大，就自己实现一个吧&lt;/p&gt;</summary>
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="Macos" scheme="https://santajiang.github.io/tags/Macos/"/>
    
  </entry>
  
  <entry>
    <title>Next主题配置Utterances评论系统</title>
    <link href="https://santajiang.github.io/2021/08/18/Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AEUtterances%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://santajiang.github.io/2021/08/18/Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AEUtterances%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-08-17T16:00:00.000Z</published>
    <updated>2021-12-16T09:49:33.294Z</updated>
    
    <content type="html"><![CDATA[<p>在网上查找这部分教程的时候，很多教程已经过时了，因为最新版的Next默认已经不内置gitment评论系统了，我在多次配置后选用了目前Next 8+版本内置的Utterances，效果不错，配置起来相较于其他的评论系统简单很多，现写下配置流程</p><span id="more"></span><h3 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h3><p>需要在自己的 <strong>Github</strong> 账号下创建一个仓库来存放评论，创建的仓库名最好为<code>utterances</code>，方便后续自己识别，注意仓库为<code>public</code></p><h3 id="安装Utterances"><a href="#安装Utterances" class="headerlink" title="安装Utterances"></a>安装Utterances</h3><p>安装地址：<a href="https://github.com/apps/utterances">https://github.com/apps/utterances</a></p><p>访问安装地址，进入安装页面，单击 <code>Install</code> 按钮</p><p>接下来是一个权限的选择，可选可访问全部仓库，或者指定刚才创建的仓库</p><h3 id="配置Utterances"><a href="#配置Utterances" class="headerlink" title="配置Utterances"></a>配置Utterances</h3><p>打开/blog/themes/next/_config.yml文件，查找<strong>utterances</strong>字段并修改如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Utterances</span></span><br><span class="line"><span class="comment"># For more information: https://utteranc.es</span></span><br><span class="line"><span class="attr">utterances:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">SantaJiang/utterances</span><span class="comment">#格式是 user_name/repo_name</span></span><br><span class="line">  <span class="comment"># Available values: pathname | url | title | og:title</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">pathname</span></span><br><span class="line">  <span class="comment"># Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">github-light</span></span><br></pre></td></tr></table></figure><p>完成后重新部署:  <code>hexo clean</code> <code>hexo g -d</code>  后查看效果</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在网上查找这部分教程的时候，很多教程已经过时了，因为最新版的Next默认已经不内置gitment评论系统了，我在多次配置后选用了目前Next 8+版本内置的Utterances，效果不错，配置起来相较于其他的评论系统简单很多，现写下配置流程&lt;/p&gt;</summary>
    
    
    
    <category term="博客搭建" scheme="https://santajiang.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://santajiang.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>将Hexo迁移至MacOS</title>
    <link href="https://santajiang.github.io/2021/08/02/%E5%B0%86Hexo%E8%BF%81%E7%A7%BB%E8%87%B3MacOS/"/>
    <id>https://santajiang.github.io/2021/08/02/%E5%B0%86Hexo%E8%BF%81%E7%A7%BB%E8%87%B3MacOS/</id>
    <published>2021-08-01T16:00:00.000Z</published>
    <updated>2021-12-23T09:34:41.278Z</updated>
    
    <content type="html"><![CDATA[<p>当时用的Windows搭建的这个博客，现在要迁移到我的MacBook Pro上来，在查了很多资料后动手实践，发现还是比较方便的，现写下流程</p><span id="more"></span><h3 id="Node-js-Git"><a href="#Node-js-Git" class="headerlink" title="Node.js / Git"></a>Node.js / Git</h3><p>首先要安装Node.js与Git的环境，这里省略就不多说了</p><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><p>将原Windows电脑上的博客复制如下的文件，并暂存起来：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line">source/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><blockquote><p>打开终端，当前路径均可，默认只会装在固定的位置<br>执行<code>sudo npm install -g hexo-cli</code> </p></blockquote><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><p>在你想要放置博客的位置，然后操作：</p><blockquote><p>打开终端<br>执行<code>hexo init blog</code></p></blockquote><h3 id="博客迁移"><a href="#博客迁移" class="headerlink" title="博客迁移"></a>博客迁移</h3><p>将之前暂存的文件，全部替换到刚才创建的blog文件夹中，然后操作：</p><blockquote><p>打开终端<br>执行<code>npm install</code><br>执行<code>hexo g</code><br>执行<code>hexo d</code><br>查看效果</p></blockquote><p>至此博客就成功迁移到MacOS中了，后续的操作与Windows下无差别</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当时用的Windows搭建的这个博客，现在要迁移到我的MacBook Pro上来，在查了很多资料后动手实践，发现还是比较方便的，现写下流程&lt;/p&gt;</summary>
    
    
    
    <category term="博客搭建" scheme="https://santajiang.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://santajiang.github.io/tags/Hexo/"/>
    
    <category term="Macos" scheme="https://santajiang.github.io/tags/Macos/"/>
    
  </entry>
  
  <entry>
    <title>Next主题配置</title>
    <link href="https://santajiang.github.io/2021/07/30/Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>https://santajiang.github.io/2021/07/30/Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</id>
    <published>2021-07-29T16:00:00.000Z</published>
    <updated>2021-12-16T09:49:14.942Z</updated>
    
    <content type="html"><![CDATA[<p>下边介绍Next主题相关的一些配置</p><span id="more"></span><h3 id="设置Next主题"><a href="#设置Next主题" class="headerlink" title="设置Next主题"></a>设置Next主题</h3><p>下载完成之后，打开/blog/_config.yml文件，查找**#Extensions**字段，修改如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><p>Hexo的主题路径是/blog/themes/<br>每种主题都在其下以文件夹的形式存在，所以Hexo切换主题是很方便的，只要修改一个参数值即可<br>这里我们还没有下载next主题，可以提前先在这里写好</p><h3 id="Next主题下载"><a href="#Next主题下载" class="headerlink" title="Next主题下载"></a>Next主题下载</h3><p>Next主题的下载分为两种，<strong>npm</strong>形式和<strong>git</strong>形式，这里两种都提一下：<br><strong>1.npm</strong><br>If you’re using Hexo 5.0 or later, the simplest way to install is through npm.<br>Open your Terminal, change to Hexo site root directory and install NexT theme:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd hexo-site</span><br><span class="line">$ npm install hexo-theme-next</span><br></pre></td></tr></table></figure><p><strong>2.git</strong><br>If you know about Git, you can clone the whole repository and update it in any time with git pull command instead of downloading archive manually.<br>Open your terminal, change to Hexo site root directory and clone the latest master branch of NexT theme:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd hexo-site</span><br><span class="line">$ git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="Next主题类型"><a href="#Next主题类型" class="headerlink" title="Next主题类型"></a>Next主题类型</h3><p>打开/blog/themes/next/_config.yml文件，查找<strong>Scheme Settings</strong>字段并修改如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dark Mode</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>如上，有四种不同形式的主题可供选择，而且可以设置黑暗模式</p><h3 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h3><p>打开/blog/themes/next/_config.yml文件，查找<strong>Social Links</strong>字段并修改如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/SantaJiang</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">jiangshengda@foxmail.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="string">简书:</span> <span class="string">https://www.jianshu.com/u/3aa0cb901bee</span> <span class="string">||fab</span> <span class="string">fa-jianshu</span></span><br><span class="line">  <span class="attr">CSDN:</span> <span class="string">https://blog.csdn.net/jsd581?spm=1010.2135.3001.5421</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-csdn</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br></pre></td></tr></table></figure><p>最后的成品效果就是我左侧头像下边的链接。</p><h3 id="捐赠"><a href="#捐赠" class="headerlink" title="捐赠"></a>捐赠</h3><p>捐赠就是在我的每篇文章下边都会有的一个按钮，点开了之后就会弹出我的微信/支付宝转账页面，如果有读者喜欢这篇文章就可以通过捐赠来支持作者</p><p>同样的，打开/blog/themes/next/_config.yml文件，查找<strong>Donate (Sponsor) settings</strong>字段并修改如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Donate (Sponsor) settings</span></span><br><span class="line"><span class="comment"># Front-matter variable (unsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, a donate button will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">赞赏文章</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">/images/wechat.JPG</span></span><br><span class="line">  <span class="comment">#alipay: /images/alipay.png</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure><h3 id="字体调整"><a href="#字体调整" class="headerlink" title="字体调整"></a>字体调整</h3><p>Next主题自带的字体是较大的，看起来有一些愣，我在多次调整后给出了一个比较合适的方案：<br>1.打开/blog/themes/next/source/css/_variables/base.styl文件，查找<strong>Font size</strong>字段，将**$font-size-large<strong>参数由1.125em改为1.0em<br>2.打开/blog/themes/next/_config.yml文件，查找</strong>Font Settings**字段并修改如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Font Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Find fonts on Google Fonts (https://fonts.google.com)</span></span><br><span class="line"><span class="comment"># All fonts set here will have the following styles:</span></span><br><span class="line"><span class="comment">#   light | light italic | normal | normal italic | bold | bold italic</span></span><br><span class="line"><span class="comment"># Be aware that setting too much fonts will cause site running slowly</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Web Safe fonts are recommended for `global` (and `title`):</span></span><br><span class="line"><span class="comment"># Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Lato</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span> <span class="number">0.8125</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br></pre></td></tr></table></figure><h3 id="访问统计"><a href="#访问统计" class="headerlink" title="访问统计"></a>访问统计</h3><p>访问统计设置完成后会出现在文章的副标题以及网站的底部<br>打开/blog/themes/next/_config.yml文件，查找**busuanzi_count:**字段并修改如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># For more information: http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">far</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure><p>至此完毕，重新部署后查看页面效果</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;下边介绍Next主题相关的一些配置&lt;/p&gt;</summary>
    
    
    
    <category term="博客搭建" scheme="https://santajiang.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://santajiang.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="https://santajiang.github.io/2021/07/28/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://santajiang.github.io/2021/07/28/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-07-27T16:00:00.000Z</published>
    <updated>2021-12-19T11:20:49.585Z</updated>
    
    <content type="html"><![CDATA[<p>搭建时踩了很多坑，最主要的是很多文章的时效性不能保障了，按照文章的方法不能成功走完下来，特在此记录下最新的搭建流程，后续如有必要会持续更新</p><span id="more"></span><p>读本教程需要有基础的Git及Github操作经验，用Hexo写博文需要对MarkDown语法有一定了解 </p><h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><p>Github Pages是Github推出的一项网站服务，有关Pages的核心就一点：**创建一个名为username.github.io的仓库。Github会自动识别为一个网站，网站的url就是username.github.io **</p><p>操作起来也很简单，<strong>步骤如下：</strong></p><ul><li>在Gtihub新建一个repository</li><li>在第一栏，<strong>Owner</strong>要选<strong>自己</strong>，<strong>Repository name</strong>填<strong>username.github.io</strong>，username就是你Github的用户名</li><li>可见性选Public，因为Pages free的账号只能public，有钱可以选Private，然后在新建之后的仓库Setting里，左侧栏选Pages，里边有升级成Pages Pro的选项，这样你的网站项目就可以隐藏，但每年要支付一定的费用</li><li>勾选 <strong>Initialize this repository with a README</strong></li><li>点<code>Create repository</code>按钮新建仓库</li></ul><p>此时你便拥有了自己的Pages个人主页，可以尝试输入网址打开看看，这个生成好的 Repository 就是用来存放博客内容的地方</p><h3 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h3><p>如果你有一个个人域名，也可以在Repository-Settings-Pages里的<strong>Custom domain</strong>选项填上自己的个人域名，这样你的Pages就和你的个人域名绑定了，输入你的域名就会自动跳转到你个人的Pages</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>生成 Repository之后，接下来就是要往这个Repository 里搭博客了</p><p>Hexo是一款本地博客框架，可以运行一个本地的静态博客网站，如果你只需要在自己电脑用，那就不用Pages了</p><p>Hexo使用起来很方便，只要在本地编辑好.md后缀的文章，然后重新部署就可以了，而且Hexo官网提供了大量的主题模板</p><p><strong>1.搭建Node.js环境</strong></p><ul><li>前往 <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li><li>下载最新LTS版本</li><li>安装</li><li>打开<strong>Command Prompt</strong>，输入 <code>node -v</code></li><li>显示版本号</li><li>成功</li></ul><p><strong>2.安装Hexo</strong></p><ul><li>打开<strong>Command Prompt</strong></li><li>执行<code>npm install -g hexo-cli</code> </li><li>输入 <code>hexo -v</code>查看版本即安装成功</li></ul><p><strong>3.Hexo的初始化</strong></p><ul><li>创建blog文件夹，位置建议各盘根目录</li><li>打开任一终端(PowerShell/Windows Terminal/Git Bash等均可)，进入刚才创建的blog路径下</li><li>执行<code>hexo init</code> 将 blog 文件夹初始化</li><li>执行 <code>npm install</code> 安装依赖包</li><li>执行 <code>hexo g</code> 开始进行部署操作</li><li>执行 <code>hexo s</code> 将生成的网页放在本地服务器</li><li>打开浏览器，输入网址 <a href="http://localhost:4000/">http://localhost:4000/</a> 就可以看到本地的博客效果了</li><li>效果没问题，返回终端按 <code>Ctrl</code> + <code>C</code> 中止服务运行</li></ul><p><strong>4.发布博客文章</strong><br>发布博客文章也是较为简单的，需要在本地新建一个博客文档，打开本地进行编辑后，重新部署发布即可，操作如下：</p><ul><li>打开刚才的终端</li><li>在blog路径下执行 <code>hexo new &quot;Test&quot;</code></li><li>生成的.md文件路径在 <code>blog\source\_posts</code>下</li></ul><p>打开Test.md，会发现Hexo已经为我们生成了一个表头，表头的格式如下  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: Test                       //文章标题</span><br><span class="line">date: 2021-0X-XX XX:XX:XX         //生成日期</span><br><span class="line">tags:                             //所属标签</span><br></pre></td></tr></table></figure><p>然后，在其下随便写一些内容，保存<br>回到终端，执行<code>hexo g</code>部署，然后执行 <code>hexo s</code>发布，刷新 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看结果</p><h3 id="在-Github-上部署-Hexo"><a href="#在-Github-上部署-Hexo" class="headerlink" title="在 Github 上部署 Hexo"></a>在 Github 上部署 Hexo</h3><p><strong>操作如下</strong>：</p><ul><li>复制Github Pages的仓库地址，如：<a href="https://github.com/SantaJiang/santajiang.github.io.git">https://github.com/SantaJiang/santajiang.github.io.git</a></li><li>修改配置文件<code>blog/_config.yml</code> ，最新版与之前的不同从这里开始了</li><li>查找**# Site**字段，修改如下：  </li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Santa的博客</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;My personal blog&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;记录、分享、交流&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">蒋胜达</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>查找**# URL**字段，修改如下：  </li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://santajiang.github.io/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure><p>注意url填写你的pages网址不是仓库地址</p><ul><li>查找<strong>deploy</strong>字段，修改如下：  </li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repository:</span> <span class="string">git@github.com:SantaJiang/santajiang.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>这里要<strong>注意</strong>两点！</p><ol><li>Github后续更新了默认主分支的名称，已经不叫<strong>master</strong>了，改为了<strong>main</strong>，如果还是写<strong>master</strong>，并不会报错，但是会在<strong>main</strong>分支之外新建一个<strong>master</strong>分支</li><li>repository一栏必须填ssh的地址，因为GitHub的密码验证于2021年8月13日不再支持，也就是不能再用密码方式去提交代码。要使用<strong>personal access token</strong>替代，当然这里我建议用SSH免密登陆，具体GitHub如何配置SSH免密登陆的步骤不在这里详述了，然后继续：</li></ol><ul><li>回到终端，执行 <code>npm install hexo-deployer-git --save</code> 只需执行一次，后续无需再执行</li><li>执行 <code>hexo d</code> 部署</li><li>登录 santajiang.github.io.git 查看效果</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;搭建时踩了很多坑，最主要的是很多文章的时效性不能保障了，按照文章的方法不能成功走完下来，特在此记录下最新的搭建流程，后续如有必要会持续更新&lt;/p&gt;</summary>
    
    
    
    <category term="博客搭建" scheme="https://santajiang.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://santajiang.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
