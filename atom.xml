<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Santa</title>
  
  
  <link href="https://santajiang.github.io/atom.xml" rel="self"/>
  
  <link href="https://santajiang.github.io/"/>
  <updated>2023-02-20T08:16:43.646Z</updated>
  <id>https://santajiang.github.io/</id>
  
  <author>
    <name>蒋胜达</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不同DPI固定窗口位置显示探索</title>
    <link href="https://santajiang.github.io/article/36353022.html"/>
    <id>https://santajiang.github.io/article/36353022.html</id>
    <published>2023-02-20T07:26:01.000Z</published>
    <updated>2023-02-20T08:16:43.646Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近做项目，需求要求不管在什么DPI下，都要保证一个小窗口，显示在一个相对大屏固定位置的地方，误差要求很小。   </p><p>一开始我的思路是按比例设，Qt的坐标（0,0）在左上角，我就以屏幕宽度的90%，屏幕高度的80%，Move窗口，结果出现了意外的情况，右侧的窗口，在比例正确的情况下总是会有一部分跑到屏幕外边去，而且DPI越大跑的越多；经调查后发现了一些需要注意的点。  </p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>其实按比例设置xy坐标的做法是正确的，只是这个xy只定住了窗口的左上角坐标，DPI发生变化后，虽然我一直给窗口设置的150px*50px，其实相对于屏幕的显示大小，发生了变化，DPI越大，窗口相对于当前的屏幕就越大；所以对于相同位置的点，因为窗口变大了，show出来的窗口就会发生偏移。这里有两种解决思路：  </p><p>1.从右往左算出来距离，不要直接乘比例算，这样不管窗口的大小怎么变，窗口的最右侧永远也会空出来一段距离，只是这样算出来的点位置会发生一些偏移，无伤大雅</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">QRectF rect = QApplication::<span class="built_in">desktop</span>()-&gt;<span class="built_in">geometry</span>();</span><br><span class="line"><span class="keyword">int</span> nWidth = rect.<span class="built_in">width</span>();</span><br><span class="line"><span class="keyword">int</span> nHeight = rect.<span class="built_in">height</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//nWidth - nWidth*0.035 - toolBox-&gt;width() = 屏幕宽度-右侧要空出的间距-窗口本体的宽度</span></span><br><span class="line">toolBox-&gt;<span class="built_in">move</span>(nWidth - nWidth*<span class="number">0.035</span> - toolBox-&gt;<span class="built_in">width</span>(), nHeight*<span class="number">0.79</span>);</span><br><span class="line">toolBox-&gt;<span class="built_in">show</span>();</span><br><span class="line">toolBox-&gt;<span class="built_in">activateWindow</span>();</span><br></pre></td></tr></table></figure><p>2.对窗口也乘以比例，例如相对于3840px*2160px分辨率，窗口的大小是150px*50px，则当DPI为2.0时，分辨率就相当于1920px*1080px，那么窗口也要对应的➗2，才能保持相对位置不变</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近做项目，需求要求不管在什么DPI下，都要保证一个小窗口，显示在一个相对大屏固定位置的地方，误差要求很小。   &lt;/p&gt;
&lt;p&gt;一开始我的</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="跨平台" scheme="https://santajiang.github.io/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>Qt跨平台路径表示法</title>
    <link href="https://santajiang.github.io/article/98434a1.html"/>
    <id>https://santajiang.github.io/article/98434a1.html</id>
    <published>2023-02-13T08:59:29.000Z</published>
    <updated>2023-02-13T09:03:31.626Z</updated>
    
    <content type="html"><![CDATA[<p>跨平台开发的时候，经常涉及到路径的表示问题，有单斜杠、双斜杠、双反斜杠等等，很容易出问题，所以直接用separator()方法代替斜杠即可，API原文：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QChar <span class="title">QDir::separator</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">Returns the native directory separator: <span class="string">&quot;/&quot;</span> under Unix and <span class="string">&quot;\&quot; under Windows.</span></span></span><br><span class="line"><span class="string"><span class="function">You do not need to use this function to build file paths. If you always use &quot;</span>/<span class="string">&quot;, Qt will translate your paths to conform to the underlying operating system. If you want to display paths to the user using their operating system&#x27;s separator use toNativeSeparators().</span></span></span><br><span class="line"><span class="string"><span class="function">See also listSeparator().</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;跨平台开发的时候，经常涉及到路径的表示问题，有单斜杠、双斜杠、双反斜杠等等，很容易出问题，所以直接用separator()方法代替斜杠即可，API原文：  &lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="跨平台" scheme="https://santajiang.github.io/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022年总结</title>
    <link href="https://santajiang.github.io/article/7448189f.html"/>
    <id>https://santajiang.github.io/article/7448189f.html</id>
    <published>2023-01-05T15:47:15.000Z</published>
    <updated>2023-01-05T15:48:09.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>2023年的第3天，写了这个回顾文章  </p><p>写这篇文章之前先回顾了一下21年的总结，总的来说22年跟预想的还是有很大变化的。  </p><p>首先，3月份预期的涨薪，名额都已经有我了，但因为新冠疫情公司效益不好，最后还是没涨，确实挺失望的；  </p><p>确实找到了新住处，3月底进行了一次搬家，这次搬到了更远的北六环，到公司的通勤时间也从30分钟变成了一个半小时，但房租着实便宜了不少，只是周边的环境过于荒凉，像一座孤岛，不知道今年房子到期后，会不会搬到沙河县城去，那里比现在住的这还是要热闹一些的；  </p><p>4月份买了一个富士微单相机，我很喜欢，拿着它拍了不少照片，也觉得多拍照片总归是好的，多年后这些照片就是宝贵的回忆；  </p><p>5月份还去了对象家里，第一次见了对方父母，本来预计今年年底两家见个面谈个订婚什么的，因为疫情也没能回去；</p><p>9月份我的猫，布丁，死了。因为反反复复的尿闭，也因为搬到了这里，附近并没有什么宠物医院，我跟对象焦急的想办法治它的时候，膀胱破裂很快就死了，我跟对象哭的哇哇的，我在一个大雨夜把它埋在了一所大学旁边的绿化带里，带着它喜欢的猫罐头和猫条，我觉得我这辈子都忘不了当时的场景；  </p><p>今年还因为新冠疫情，林林总总的在家居家办公了一个半月，到最后年底放开了，自己也感染了，还挺难受，又高烧又各种症状的，过了一个星期也算是挺过来了，对象照顾我结果把她也给传染了；    </p><p>预期的跳槽，也并没有跳，今年的形势比预想的还要严峻，新冠疫情搞的经济不行，各个大厂纷纷在裁员降薪，而且我自己今年有点偷懒，也没有怎么努力准备面试的东西，想想就先算了，稳稳再说（也因为这家公司的福利比较好，工作强度不大，休息时间多），23年会不会跳槽，说实话心里还没有一个定数，想着先总结一下以往几年工作的一些成果，哪怕说后边跳，手里也能拿出来一些东西，不至于工作了好几年，什么都没留下来；  </p><p>关于旅游，今年哪都没去玩，22年确实是没有意义的一年，我觉得多年后我也不想回忆起今年。  </p><h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><p>今年写的有点琐碎，感觉情绪整体也没有去年那么好，发生了好多事，疫情又反反复复的，闹到最后自己还是感染了；另一方面自己岁数也越来越大了，再过两年就30了，钱也没挣多少，有种莫名的焦虑。后边还有求婚，订婚，婚礼，买房，等等，每每想到就很焦虑，再加上自己程序员的职业特性，今年总结起来就俩字：<strong>焦虑</strong>  </p><p>对于2023年的期望，还是希望生活能逐渐的变好吧，通知说公司这周五要搬家到奥体公园旁边，挨着鸟巢，也不知道去那边了会有什么样新的展开；然后也希望跟对象的一系列事情也都能办完，顺利的求婚，顺利的订婚，顺利的婚礼    </p><p>虽然预料到一堆事压着，还是得撑着，一件一件给办了，<strong>加油吧</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;2023年的第3天，写了这个回顾文章  &lt;/p&gt;
&lt;p&gt;写这篇文章之前先回顾了一下21年的总结，总的来说22年跟预想的还是有很大变化的。  </summary>
      
    
    
    
    <category term="感悟" scheme="https://santajiang.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="年度总结" scheme="https://santajiang.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>判断Linux下程序是否在运行</title>
    <link href="https://santajiang.github.io/article/c421f6f2.html"/>
    <id>https://santajiang.github.io/article/c421f6f2.html</id>
    <published>2022-11-22T02:13:24.000Z</published>
    <updated>2022-11-22T02:23:40.713Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这里提供两种可以判断Linux下某程序是否正在运行的方法，两种都是通过执行终端命令，获取结果并判断来实现的</p><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkProgramRun</span><span class="params">(<span class="keyword">const</span> QString &amp; ProcessName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString LinuxProcessName = ProcessName;</span><br><span class="line"></span><br><span class="line">    QProcess process;</span><br><span class="line">    process.<span class="built_in">setReadChannel</span>(QProcess::StandardOutput);</span><br><span class="line"></span><br><span class="line">    process.<span class="built_in">start</span>(<span class="string">&quot;ps -ef&quot;</span>);</span><br><span class="line">    process.<span class="built_in">waitForFinished</span>();</span><br><span class="line"></span><br><span class="line">    QByteArray bytes = process.<span class="built_in">readAll</span>();</span><br><span class="line">    process.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* ch;</span><br><span class="line">    QByteArray ba = LinuxProcessName.<span class="built_in">toLatin1</span>(); <span class="comment">//must</span></span><br><span class="line">    ch = ba.<span class="built_in">data</span>();</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(bytes.<span class="built_in">contains</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>注：这里用到了grep，如果直接用QProcess的start方法执行命令是获取不到grep筛选后的结果的，暂不知原因，这里采用执行shell和echo打印相结合的方法可以成功打印出结果，但还是有小问题，结果是两行，这里只能出现一行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkProgramRun</span><span class="params">(<span class="keyword">const</span> QString &amp; ProcessName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString LinuxProcessName = ProcessName;</span><br><span class="line"></span><br><span class="line">    QProcess process;</span><br><span class="line">    QStringList args;</span><br><span class="line">    args&lt;&lt;<span class="string">&quot;-c&quot;</span>;</span><br><span class="line">    QString strCommnd = <span class="built_in">QString</span>(<span class="string">&quot;echo $(ps -ef | grep %1 | grep -v grep)&quot;</span>).<span class="built_in">arg</span>(LinuxProcessName);</span><br><span class="line">    args&lt;&lt;strCommnd;</span><br><span class="line"></span><br><span class="line">    process.<span class="built_in">start</span>(<span class="string">&quot;sh&quot;</span>,args);</span><br><span class="line">    process.<span class="built_in">waitForFinished</span>();</span><br><span class="line"></span><br><span class="line">    QString programs = process.<span class="built_in">readAllStandardOutput</span>();</span><br><span class="line">    process.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(programs.<span class="built_in">contains</span>(LinuxProcessName))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这里提供两种可以判断Linux下某程序是否正在运行的方法，两种都是通过执行终端命令，获取结果并判断来实现的&lt;/p&gt;
&lt;h3 id=&quot;方法1&quot;</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="Linux" scheme="https://santajiang.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Qt下调用系统功能</title>
    <link href="https://santajiang.github.io/article/b54bf0c4.html"/>
    <id>https://santajiang.github.io/article/b54bf0c4.html</id>
    <published>2022-11-02T06:36:41.000Z</published>
    <updated>2022-11-02T07:30:45.680Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><strong>1.关闭窗口</strong><br>本质上就是发组合键：Alt+F4 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">closeWindow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined Q_OS_WIN</span></span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_LMENU,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_F4,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_F4,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_LMENU,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined Q_OS_LINUX</span></span><br><span class="line">    Display *disp = <span class="built_in">XOpenDisplay</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Alt_L), True, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_F4), True, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_F4), <span class="literal">false</span>, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Alt_L), <span class="literal">false</span>, CurrentTime);</span><br><span class="line">    <span class="built_in">XCloseDisplay</span>(disp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.显示桌面</strong></p><p>本质上就是发组合键：Win+D</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showDesktop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined Q_OS_WIN</span></span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_LWIN,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(<span class="number">68</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(<span class="number">68</span>,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_LWIN,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined Q_OS_LINUX</span></span><br><span class="line">    Display *disp = <span class="built_in">XOpenDisplay</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Super_L), True, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_D), True, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_D), <span class="literal">false</span>, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Super_L), <span class="literal">false</span>, CurrentTime);</span><br><span class="line">    <span class="built_in">XCloseDisplay</span>(disp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.Page Up/Page Down</strong></p><p>本质上就是模拟按下对应的键</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pageUp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined Q_OS_WIN</span></span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_PRIOR,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_PRIOR,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined Q_OS_LINUX</span></span><br><span class="line">    Display *disp = <span class="built_in">XOpenDisplay</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Page_Up), True, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Page_Up), <span class="literal">false</span>, CurrentTime);</span><br><span class="line">    <span class="built_in">XCloseDisplay</span>(disp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pageDown</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined Q_OS_WIN</span></span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_NEXT,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_NEXT,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined Q_OS_LINUX</span></span><br><span class="line">    Display *disp = <span class="built_in">XOpenDisplay</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Next), True, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Next), <span class="literal">false</span>, CurrentTime);</span><br><span class="line">    <span class="built_in">XCloseDisplay</span>(disp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.多任务</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showDesktop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined Q_OS_WIN</span></span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_CONTROL,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_LMENU,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_TAB,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_TAB,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_CONTROL,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_LMENU,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined Q_OS_LINUX</span></span><br><span class="line">    Display *disp = <span class="built_in">XOpenDisplay</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Super_L), True, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_W), True, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_W), <span class="literal">false</span>, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Super_L), <span class="literal">false</span>, CurrentTime);</span><br><span class="line">    <span class="built_in">XCloseDisplay</span>(disp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1.关闭窗口&lt;/strong&gt;&lt;br&gt;本质上就是发组合键：Alt+F4 &lt;/p&gt;
&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="系统功能" scheme="https://santajiang.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Qt下的Hook</title>
    <link href="https://santajiang.github.io/article/4aa62fe6.html"/>
    <id>https://santajiang.github.io/article/4aa62fe6.html</id>
    <published>2022-10-19T16:00:00.000Z</published>
    <updated>2022-10-20T05:18:31.490Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>底层hook（钩子）相关逻辑；包含键位和各种组合键的捕获方法，及与Qt类进行交互的逻辑，特此记录</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>源文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">HHOOK keyHook= <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//keyboard hook</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">keyProc</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    KBDLLHOOKSTRUCT *pkbhs = (KBDLLHOOKSTRUCT *) lParam;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(nCode == HC_ACTION)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pkbhs-&gt;vkCode == VK_ESCAPE &amp;&amp; <span class="built_in">GetAsyncKeyState</span>(VK_CONTROL)&amp; <span class="number">0x8000</span> &amp;&amp; <span class="built_in">GetAsyncKeyState</span>(VK_SHIFT)&amp;<span class="number">0x8000</span>) <span class="comment">//&quot;Ctrl+Shift+Esc&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pkbhs-&gt;vkCode == VK_ESCAPE &amp;&amp; <span class="built_in">GetAsyncKeyState</span>(VK_CONTROL) &amp; <span class="number">0x8000</span>)  <span class="comment">//&quot;Ctrl+Esc&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pkbhs-&gt;vkCode == VK_TAB &amp;&amp; pkbhs-&gt;flags &amp; LLKHF_ALTDOWN )    <span class="comment">//&quot;Alt+Tab&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pkbhs-&gt;vkCode == VK_ESCAPE &amp;&amp; pkbhs-&gt;flags &amp;LLKHF_ALTDOWN)  <span class="comment">//&quot;Alt+Esc&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pkbhs-&gt;vkCode == VK_F4 &amp;&amp; pkbhs-&gt;flags &amp; LLKHF_ALTDOWN)  <span class="comment">//&quot;Alt+F4&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYDOWN &amp;&amp; pkbhs-&gt;vkCode == VK_SNAPSHOT)  <span class="comment">//&quot;Prtic&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYUP &amp;&amp; pkbhs-&gt;vkCode == VK_SNAPSHOT)</span><br><span class="line">        &#123;</span><br><span class="line">            MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYDOWN &amp;&amp; pkbhs-&gt;vkCode == VK_LWIN)  <span class="comment">// &quot;LeftWin&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYUP &amp;&amp; pkbhs-&gt;vkCode == VK_LWIN)</span><br><span class="line">        &#123;</span><br><span class="line">            MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYDOWN &amp;&amp; pkbhs-&gt;vkCode == VK_RWIN)  <span class="comment">//&quot;RightWin&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYUP &amp;&amp; pkbhs-&gt;vkCode == VK_RWIN)</span><br><span class="line">        &#123;</span><br><span class="line">            MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYDOWN &amp;&amp; pkbhs-&gt;vkCode == VK_TAB)  <span class="comment">//&quot;TAB&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYUP &amp;&amp; pkbhs-&gt;vkCode == VK_TAB)</span><br><span class="line">        &#123;</span><br><span class="line">            MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYDOWN &amp;&amp; pkbhs-&gt;vkCode == <span class="number">68</span>)    <span class="comment">//&quot;Win+D&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">GetKeyState</span>(VK_LWIN))</span><br><span class="line">            &#123;</span><br><span class="line">                MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CallNextHookEx</span>(keyHook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hook</span><span class="params">(<span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//registered hooks</span></span><br><span class="line">        keyHook = <span class="built_in">SetWindowsHookEx</span>(WH_KEYBOARD_LL,keyProc,<span class="built_in">GetModuleHandle</span>(<span class="literal">nullptr</span>),<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">UnhookWindowsHookEx</span>(keyHook);</span><br><span class="line">        keyHook= <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MainWindow* instance;</span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent) : <span class="built_in">QMainWindow</span>(parent),<span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    instance = <span class="keyword">this</span>;</span><br><span class="line">    <span class="built_in">hook</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">hook</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">MainWindow *<span class="title">MainWindow::getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;底层hook（钩子）相关逻辑；包含键位和各种组合键的捕获方法，及与Qt类进行交互的逻辑，特此记录&lt;/p&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="Hook" scheme="https://santajiang.github.io/tags/Hook/"/>
    
  </entry>
  
  <entry>
    <title>信号槽的特殊声明</title>
    <link href="https://santajiang.github.io/article/a204f63f.html"/>
    <id>https://santajiang.github.io/article/a204f63f.html</id>
    <published>2022-09-27T08:34:10.000Z</published>
    <updated>2022-09-27T08:36:39.168Z</updated>
    
    <content type="html"><![CDATA[<p>适用于槽函数逻辑较简单无须单独列出的情况：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QTimer* timer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">connect</span>(timer, &amp;QTimer::timeout, [ = ]()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;适用于槽函数逻辑较简单无须单独列出的情况：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="信号槽" scheme="https://santajiang.github.io/tags/%E4%BF%A1%E5%8F%B7%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>Qt高分屏适配方案</title>
    <link href="https://santajiang.github.io/article/a2642ebb.html"/>
    <id>https://santajiang.github.io/article/a2642ebb.html</id>
    <published>2022-09-21T08:32:33.000Z</published>
    <updated>2022-09-21T08:35:06.110Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>通过比例系数来实现高分屏适配，软件的每个UI组件尺寸都要乘以比例系数，以达到适配高分辨率的目的</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">win32:&#123;</span><br><span class="line">QT += winextras</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Q_OS_WIN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;windows.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">getWindowScaleFactor</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> scaleFactor = <span class="number">1.0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Q_OS_WIN</span></span><br><span class="line">    <span class="keyword">int</span> nWidth = <span class="built_in">GetSystemMetrics</span>(SM_CXSCREEN);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    QRectF rect = QApplication::<span class="built_in">desktop</span>()-&gt;<span class="built_in">screenGeometry</span>();</span><br><span class="line">    <span class="keyword">int</span> nWidth = rect.<span class="built_in">width</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(nWidth &gt;= <span class="number">3840</span> )</span><br><span class="line">    &#123;</span><br><span class="line">          scaleFactor = <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(nWidth &lt; <span class="number">3840</span> &amp;&amp; nWidth &gt; <span class="number">1366</span> )</span><br><span class="line">    &#123;</span><br><span class="line">          scaleFactor = <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(nWidth &lt;= <span class="number">1366</span>  &amp;&amp; nWidth &gt; <span class="number">800</span> )</span><br><span class="line">    &#123;</span><br><span class="line">          scaleFactor = <span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(nWidth &lt;= <span class="number">800</span>)</span><br><span class="line">    &#123;</span><br><span class="line">          scaleFactor = <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//各类靠property获取比例系数</span></span><br><span class="line">    QApplication::<span class="built_in">instance</span>()-&gt;<span class="built_in">setProperty</span>(<span class="string">&quot;scalefactor&quot;</span>, dScaleFactor); </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;通过比例系数来实现高分屏适配，软件的每个UI组件尺寸都要乘以比例系数，以达到适配高分辨率的目的&lt;/p&gt;
&lt;h3 id=&quot;实现&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="高分屏" scheme="https://santajiang.github.io/tags/%E9%AB%98%E5%88%86%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title>Qt实现Http的Get/Post请求</title>
    <link href="https://santajiang.github.io/article/cdff3725.html"/>
    <id>https://santajiang.github.io/article/cdff3725.html</id>
    <published>2022-09-15T11:08:04.000Z</published>
    <updated>2022-09-21T08:16:03.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">QT += network</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QNetworkAccessManager&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QNetworkRequest&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QNetworkReply&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">init</span>()</span><br><span class="line">&#123;</span><br><span class="line">    QNetworkAccessManager* manager = <span class="keyword">new</span> <span class="built_in">QNetworkAccessManager</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">connect</span>(manager,<span class="built_in">SIGNAL</span>(<span class="built_in">finished</span>(QNetworkReply*)),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">replyFinished</span>(QNetworkReply*)));<span class="comment">//关联信号和槽</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求，以天气预报为例</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">queryWeather</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> quest_array[<span class="number">256</span>]=<span class="string">&quot;http://wthrcdn.etouch.cn/weather_mini?city=&quot;</span>;</span><br><span class="line">    QNetworkRequest quest;</span><br><span class="line">    <span class="built_in">sprintf</span>(quest_array,<span class="string">&quot;%s%s&quot;</span>,quest_array,cityName.<span class="built_in">toUtf8</span>().<span class="built_in">data</span>());</span><br><span class="line">    quest.<span class="built_in">setUrl</span>(<span class="built_in">QUrl</span>(quest_array));</span><br><span class="line">    quest.<span class="built_in">setHeader</span>(QNetworkRequest::UserAgentHeader,<span class="string">&quot;RT-Thread ART&quot;</span>);</span><br><span class="line">    <span class="comment">/*发送get网络请求*/</span></span><br><span class="line">    manager-&gt;<span class="built_in">get</span>(quest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//响应</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replyFinished</span><span class="params">(QNetworkReply *reply)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    allinfo = reply-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;allinfo：&quot;</span>&lt;&lt;allinfo;</span><br><span class="line">    </span><br><span class="line">    QJsonParseError err;</span><br><span class="line">    QJsonDocument json_recv = QJsonDocument::<span class="built_in">fromJson</span>(allinfo.<span class="built_in">toUtf8</span>(),&amp;err);<span class="comment">//解析json对象</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt;<span class="string">&quot;Json-Error:&quot;</span>&lt;&lt; err.error;</span><br><span class="line">    <span class="keyword">if</span>(!json_recv.<span class="built_in">isNull</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        QJsonObject object = json_recv.<span class="built_in">object</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="网络" scheme="https://santajiang.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式判断版本号大小</title>
    <link href="https://santajiang.github.io/article/ad3e8609.html"/>
    <id>https://santajiang.github.io/article/ad3e8609.html</id>
    <published>2022-09-05T05:58:26.000Z</published>
    <updated>2022-09-21T08:15:50.117Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compareVersion</span><span class="params">(QString ver1, QString ver2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QStringList list1 = ver1.<span class="built_in">replace</span>(<span class="built_in">QRegExp</span>(<span class="string">&quot;[a-zA-Z() ]&quot;</span>), <span class="string">&quot;&quot;</span>).<span class="built_in">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    QStringList list2 = ver2.<span class="built_in">replace</span>(<span class="built_in">QRegExp</span>(<span class="string">&quot;[a-zA-Z() ]&quot;</span>), <span class="string">&quot;&quot;</span>).<span class="built_in">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (list1.<span class="built_in">size</span>() == <span class="number">3</span> &amp;&amp; list2.<span class="built_in">size</span>() == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        qint32 ver1 = (list1.<span class="built_in">at</span>(<span class="number">0</span>).<span class="built_in">toInt</span>() &lt;&lt; <span class="number">16</span>) | (list1.<span class="built_in">at</span>(<span class="number">1</span>).<span class="built_in">toInt</span>() &lt;&lt; <span class="number">8</span>) | list1.<span class="built_in">at</span>(<span class="number">2</span>).<span class="built_in">toInt</span>();</span><br><span class="line">        qint32 ver2 = (list2.<span class="built_in">at</span>(<span class="number">0</span>).<span class="built_in">toInt</span>() &lt;&lt; <span class="number">16</span>) | (list2.<span class="built_in">at</span>(<span class="number">1</span>).<span class="built_in">toInt</span>() &lt;&lt; <span class="number">8</span>) | list2.<span class="built_in">at</span>(<span class="number">2</span>).<span class="built_in">toInt</span>();</span><br><span class="line">        <span class="keyword">return</span> ver2 &gt; ver1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="正则表达式" scheme="https://santajiang.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Qt图片压缩</title>
    <link href="https://santajiang.github.io/article/54b18459.html"/>
    <id>https://santajiang.github.io/article/54b18459.html</id>
    <published>2022-08-05T08:18:25.000Z</published>
    <updated>2022-09-21T08:16:05.923Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Qt本身就带图片压缩的方法，即利用QPixMap的save方法   </p><p>最后的效果很好，肉眼基本不可辨别，测试用一张微单拍摄的6K图，原图19.7MB，压缩后变为2.3MB </p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>完整流程：</p><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> compressImage(QString path)</span><br><span class="line">&#123;</span><br><span class="line">    QFile file(ui-&gt;lineEdit-&gt;text());</span><br><span class="line">    <span class="keyword">if</span>(!file.open(<span class="attribute">QIODevice</span>::ReadWrite))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QByteArray bytes = file.readAll();</span><br><span class="line">    QImage img;</span><br><span class="line">    img.loadFromData(bytes);</span><br><span class="line"></span><br><span class="line">    QPixmap bk_image;</span><br><span class="line">    bk_image.convertFromImage(img);</span><br><span class="line"></span><br><span class="line">    bk_image.save(path, nullptr, <span class="number">80</span>);<span class="comment">//压缩率从0-100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Qt本身就带图片压缩的方法，即利用QPixMap的save方法   &lt;/p&gt;
&lt;p&gt;最后的效果很好，肉眼基本不可辨别，测试用一张微单拍摄的6</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="图像处理" scheme="https://santajiang.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>2021年总结</title>
    <link href="https://santajiang.github.io/article/9f7fa39c.html"/>
    <id>https://santajiang.github.io/article/9f7fa39c.html</id>
    <published>2021-12-30T16:00:00.000Z</published>
    <updated>2022-02-23T01:24:42.579Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="2021-12-31"><a href="#2021-12-31" class="headerlink" title="2021-12-31"></a>2021-12-31</h4><p>21年的最后一天了，也是同天写了这个文章</p><p>今年是变化巨大的一年，5月份我辞掉了工作三年的工作，来到了一家新公司，这里的工作我更喜欢也更轻松，当然挣得也更多了；搬了新的出租屋，从北京的南五环搬到了北五环，租了一个整居室，整个换了个大环境—后来被证明是个沙雕操作，每个月的房租都能跟买房的房贷持平了；还去了上海和成都旅游—在之前我从未出过河北省的地域范围；空余时间多了，在GitHub发布了很多我一直想要做的项目 ，还创建了这个博客，写了很多文章  </p><p>对于22年，当然还是有一些期望的，因为来公司的时候被HR压价了，我一直心里挺不舒服，尤其她后来得意洋洋的跟我回访的时候说她招到了一个宝（意思她用比这个岗位低的价换来了一个比预期能干的开发人员）， 我就坚定了我想要跳槽的想法。因为我一直在做Qt开发的关系，初步的想法是如果能去金山什么的，做做WPS也是很好的，如果其他的公司有合适的也不错；然后是要换一处房子，希望能找到一个合适的新住处····嗯，暂时就这些，当然也想把这个博客好好的弄下去，不光是对经验的一种总结，也包含一些感悟和记录吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h4 id=&quot;2021-12-31&quot;&gt;&lt;a href=&quot;#2021-12-31&quot; class=&quot;headerlink&quot; title=&quot;2021-12-31&quot;&gt;&lt;/a&gt;2021-12-31&lt;/h4&gt;&lt;p&gt;21年的最后一天了，也是同天写了这个文章&lt;/p&gt;
&lt;p&gt;今年是变化</summary>
      
    
    
    
    <category term="感悟" scheme="https://santajiang.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="年度总结" scheme="https://santajiang.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Qt调用MacOS终端</title>
    <link href="https://santajiang.github.io/article/fa7e3d73.html"/>
    <id>https://santajiang.github.io/article/fa7e3d73.html</id>
    <published>2021-12-22T16:00:00.000Z</published>
    <updated>2022-09-21T08:15:59.295Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;QProcess&gt;</span><br><span class="line"></span><br><span class="line">QProcess pCmd = <span class="keyword">new</span> QProcess(<span class="keyword">this</span>);</span><br><span class="line">connect(pCmd , SIGNAL(readyReadStandardOutput()) , <span class="keyword">this</span> , SLOT(on_readoutput()));</span><br><span class="line">connect(pCmd , SIGNAL(readyReadStandardError()) , <span class="keyword">this</span> , SLOT(on_readerror()));</span><br><span class="line"></span><br><span class="line">pCmd-&gt;start(<span class="string">&quot;bash&quot;</span>);</span><br><span class="line">pCmd-&gt;waitForStarted();</span><br><span class="line"></span><br><span class="line">QString strTermCmd = <span class="string">&quot;git add -A&quot;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">pCmd-&gt;write(strTermCmd.toUtf8().data());</span><br><span class="line">pCmd-&gt;waitForFinished();</span><br></pre></td></tr></table></figure><p>问题的关键就在这个<code>pCmd-&gt;start(&quot;bash&quot;);</code> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight qt&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="终端" scheme="https://santajiang.github.io/tags/%E7%BB%88%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>RGB值Hex颜色值转换</title>
    <link href="https://santajiang.github.io/article/caeca79b.html"/>
    <id>https://santajiang.github.io/article/caeca79b.html</id>
    <published>2021-12-18T16:00:00.000Z</published>
    <updated>2022-09-21T08:16:09.628Z</updated>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>输入RGB/Hex值，回车触发转换并自动复制结果到剪贴板，简单高效</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>回车生效的事件直接用的是QLineEdit自带的returnPressed()事件，而复制到剪贴板用到的是QClipboard类：  </p><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;QClipboard&gt;</span><br><span class="line"></span><br><span class="line">QString str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">QClipboard *clip = <span class="attribute">QApplication</span>::clipboard();</span><br><span class="line">clip-&gt;setText(str);</span><br></pre></td></tr></table></figure><p>这样这个”Hello”就自动复制到剪贴板里了.  </p><p>接下来最主要的就是颜色值的相互转换了，可以里用QColor类，先获取对应的color，然后再转换为对应的显示形式，这里贴上核心代码：  </p><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;QColor&gt;</span><br><span class="line"></span><br><span class="line">QColor <span class="built_in">color</span>(<span class="number">235</span>,<span class="number">235</span>,<span class="number">235</span>);</span><br><span class="line"><span class="built_in">int</span> red = <span class="built_in">color</span>.red();</span><br><span class="line"><span class="built_in">int</span> green = <span class="built_in">color</span>.green();</span><br><span class="line"><span class="built_in">int</span> blue = <span class="built_in">color</span>.blue();</span><br><span class="line">QString strRed = QString(<span class="string">&quot;%1&quot;</span>).arg(red &amp; <span class="number">0xFF</span>, <span class="number">2</span>, <span class="number">16</span>, QLatin1Char(<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">QString strGreen = QString(<span class="string">&quot;%1&quot;</span>).arg(green &amp; <span class="number">0xFF</span>, <span class="number">2</span>, <span class="number">16</span>, QLatin1Char(<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">QString strBlue = QString(<span class="string">&quot;%1&quot;</span>).arg(blue &amp; <span class="number">0xFF</span>, <span class="number">2</span>, <span class="number">16</span>, QLatin1Char(<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//十六进制显示</span></span><br><span class="line">QString hex = QString(<span class="string">&quot;#%1%2%3&quot;</span>).arg(strRed.toUpper()).arg(strGreen.toUpper()).arg(strBlue.toUpper());</span><br><span class="line"><span class="comment">//RGB显示</span></span><br><span class="line">QString rgb = QString(<span class="string">&quot;%1, %2, %3&quot;</span>).arg(red).arg(green).arg(blue);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;输入RGB/Hex值，回车触发转换并自动复制结果到剪贴板，简单高效&lt;/p&gt;
&lt;h3 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="颜色处理" scheme="https://santajiang.github.io/tags/%E9%A2%9C%E8%89%B2%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>将Hexo迁移至MacOS</title>
    <link href="https://santajiang.github.io/article/3e930800.html"/>
    <id>https://santajiang.github.io/article/3e930800.html</id>
    <published>2021-08-01T16:00:00.000Z</published>
    <updated>2022-09-21T08:04:41.101Z</updated>
    
    <content type="html"><![CDATA[<p>当时用的Windows搭建的这个博客，现在要迁移到我的MacBook Pro上来，在查了很多资料后动手实践，发现还是比较方便的，现写下流程  </p><h3 id="Node-js-Git"><a href="#Node-js-Git" class="headerlink" title="Node.js / Git"></a>Node.js / Git</h3><p>首先要安装Node.js与Git的环境，这里省略就不多说了</p><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><p>将原Windows电脑上的博客复制如下的文件，并暂存起来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line">source/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ul><li>打开终端，当前路径均可，默认只会装在固定的位置</li><li>执行<code>sudo npm install -g hexo-cli</code> </li></ul><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><p>在你想要放置博客的位置，然后操作：</p><ul><li>打开终端</li><li>执行<code>hexo init blog</code></li></ul><h3 id="博客迁移"><a href="#博客迁移" class="headerlink" title="博客迁移"></a>博客迁移</h3><p>将之前暂存的文件，全部替换到刚才创建的blog文件夹中，然后操作：</p><ul><li>打开终端</li><li>执行<code>npm install</code></li><li>执行<code>hexo g</code></li><li>执行<code>hexo d</code></li><li> 查看效果</li></ul><p>至此博客就成功迁移到MacOS中了，后续的操作与Windows下无差别</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当时用的Windows搭建的这个博客，现在要迁移到我的MacBook Pro上来，在查了很多资料后动手实践，发现还是比较方便的，现写下流程  &lt;/p&gt;
&lt;h3 id=&quot;Node-js-Git&quot;&gt;&lt;a href=&quot;#Node-js-Git&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="博客搭建" scheme="https://santajiang.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://santajiang.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="https://santajiang.github.io/article/ec7d7221.html"/>
    <id>https://santajiang.github.io/article/ec7d7221.html</id>
    <published>2021-07-27T16:00:00.000Z</published>
    <updated>2022-09-05T02:11:29.332Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><p>Github Pages是Github推出的一项网站服务，有关Pages的核心就一点：**创建一个名为username.github.io的仓库。Github会自动识别为一个网站，网站的url就是username.github.io **</p><p>操作起来也很简单，<strong>步骤如下：</strong></p><ul><li>在Gtihub新建一个repository</li><li>在第一栏，<strong>Owner</strong>要选<strong>自己</strong>，<strong>Repository name</strong>填<strong>username.github.io</strong>，username就是你Github的用户名</li><li>可见性选Public，因为Pages free的账号只能public，有钱可以选Private，然后在新建之后的仓库Setting里，左侧栏选Pages，里边有升级成Pages Pro的选项，这样你的网站项目就可以隐藏，但每年要支付一定的费用</li><li>勾选 <strong>Initialize this repository with a README</strong></li><li>点<code>Create repository</code>按钮新建仓库</li></ul><p>此时你便拥有了自己的Pages个人主页，可以尝试输入网址打开看看，这个生成好的 Repository 就是用来存放博客内容的地方</p><h3 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h3><p>如果你有一个个人域名，也可以在Repository-Settings-Pages里的<strong>Custom domain</strong>选项填上自己的个人域名，这样你的Pages就和你的个人域名绑定了，输入你的域名就会自动跳转到你个人的Pages</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>生成 Repository之后，接下来就是要往这个Repository 里搭博客了</p><p>Hexo是一款本地博客框架，可以运行一个本地的静态博客网站，如果你只需要在自己电脑用，那就不用Pages了</p><p>Hexo使用起来很方便，只要在本地编辑好.md后缀的文章，然后重新部署就可以了，而且Hexo官网提供了大量的主题模板</p><p><strong>1.搭建Node.js环境</strong></p><ul><li>前往 <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li><li>下载最新LTS版本</li><li>安装</li><li>打开<strong>Command Prompt</strong>，输入 <code>node -v</code></li><li>显示版本号</li><li>成功</li></ul><p><strong>2.安装Hexo</strong></p><ul><li>打开<strong>Command Prompt</strong></li><li>执行<code>npm install -g hexo-cli</code> </li><li>输入 <code>hexo -v</code>查看版本即安装成功</li></ul><p><strong>3.Hexo的初始化</strong></p><ul><li>创建blog文件夹，位置建议各盘根目录</li><li>打开任一终端(PowerShell/Windows Terminal/Git Bash等均可)，进入刚才创建的blog路径下</li><li>执行<code>hexo init</code> 将 blog 文件夹初始化</li><li>执行 <code>npm install</code> 安装依赖包</li><li>执行 <code>hexo g</code> 开始进行部署操作</li><li>执行 <code>hexo s</code> 将生成的网页放在本地服务器</li><li>打开浏览器，输入网址 <a href="http://localhost:4000/">http://localhost:4000/</a> 就可以看到本地的博客效果了</li><li>效果没问题，返回终端按 <code>Ctrl</code> + <code>C</code> 中止服务运行</li></ul><p><strong>4.发布博客文章</strong><br>发布博客文章也是较为简单的，需要在本地新建一个博客文档，打开本地进行编辑后，重新部署发布即可，操作如下：</p><ul><li>打开刚才的终端</li><li>在blog路径下执行 <code>hexo new &quot;Test&quot;</code></li><li>生成的.md文件路径在 <code>blog\source\_posts</code>下</li></ul><p>打开Test.md，会发现Hexo已经为我们生成了一个表头，表头的格式如下  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: Test                       //文章标题</span><br><span class="line">date: 2021-0X-XX XX:XX:XX         //生成日期</span><br><span class="line">tags:                             //所属标签</span><br></pre></td></tr></table></figure><p>然后，在其下随便写一些内容，保存<br>回到终端，执行<code>hexo g</code>部署，然后执行 <code>hexo s</code>发布，刷新 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看结果</p><h3 id="在-Github-上部署-Hexo"><a href="#在-Github-上部署-Hexo" class="headerlink" title="在 Github 上部署 Hexo"></a>在 Github 上部署 Hexo</h3><p><strong>操作如下</strong>：</p><ul><li>复制Github Pages的仓库地址，如：<a href="https://github.com/SantaJiang/santajiang.github.io.git">https://github.com/SantaJiang/santajiang.github.io.git</a></li><li>修改配置文件<code>blog/_config.yml</code> ，最新版与之前的不同从这里开始了</li><li>查找**# Site**字段，修改如下：  </li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Santa的博客</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;My personal blog&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;记录、分享、交流&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">蒋胜达</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>查找**# URL**字段，修改如下：  </li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://santajiang.github.io/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure><p>注意url填写的是pages网址不是仓库地址</p><ul><li>查找<strong>deploy</strong>字段，修改如下：  </li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repository:</span> <span class="string">git@github.com:SantaJiang/santajiang.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>这里要<strong>注意</strong>两点！</p><ol><li>Github后续更新了默认主分支的名称，已经不叫<strong>master</strong>了，改为了<strong>main</strong>，如果还是写<strong>master</strong>，并不会报错，但是会在<strong>main</strong>分支之外新建一个<strong>master</strong>分支</li><li>repository一栏必须填ssh的地址，因为GitHub的密码验证于2021年8月13日不再支持，也就是不能再用密码方式去提交代码。要使用<strong>personal access token</strong>替代，当然这里我建议用SSH免密登陆，具体GitHub如何配置SSH免密登陆的步骤不在这里详述了，然后继续：</li></ol><ul><li>回到终端，执行 <code>npm install hexo-deployer-git --save</code> 只需执行一次，后续无需再执行</li><li>执行 <code>hexo d</code> 部署</li><li>登录 santajiang.github.io.git 查看效果</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Github-Pages&quot;&gt;&lt;a href=&quot;#Github-Pages&quot; class=&quot;headerlink&quot; title=&quot;Github Pages&quot;&gt;&lt;/a&gt;Github Pages&lt;/h3&gt;&lt;p&gt;Github Pages是Github推出的一项网站服务，有</summary>
      
    
    
    
    <category term="博客搭建" scheme="https://santajiang.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://santajiang.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
