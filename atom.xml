<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Santa&#39;s Blog</title>
  
  
  <link href="https://santajiang.github.io/atom.xml" rel="self"/>
  
  <link href="https://santajiang.github.io/"/>
  <updated>2024-09-05T13:22:37.481Z</updated>
  <id>https://santajiang.github.io/</id>
  
  <author>
    <name>蒋胜达</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux下开发之动态库加载</title>
    <link href="https://santajiang.github.io/article/427bdb52.html"/>
    <id>https://santajiang.github.io/article/427bdb52.html</id>
    <published>2024-09-05T13:17:58.000Z</published>
    <updated>2024-09-05T13:22:37.481Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Linux下进行Qt开发时，习惯性的分了几个模块（1个主工程，3个共享动态库），编译通过了但运行时遇到了问题，虽然二进制可执行文件和动态库在同一目录下，但是就是提示找不到对应的动态库，在一番尝试后，需要用rpath来执行最高优先搜索动态库的路径就行</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">QT += widgets core gui</span><br><span class="line"></span><br><span class="line">TEMPLATE = app</span><br><span class="line">CONFIG += c++<span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">CONFIG</span>(release, debug|release): &#123;</span><br><span class="line">    DESTDIR = $$PWD/../Bin/Release</span><br><span class="line">    LIBS += $$PWD/../Bin/Release/libUIElement.so</span><br><span class="line">    LIBS += $$PWD/../Bin/Release/libPublicData.so</span><br><span class="line">    LIBS += $$PWD/../Bin/Release/libAIModule.so</span><br><span class="line">&#125; <span class="keyword">else</span>: <span class="built_in">CONFIG</span>(debug, debug|release): &#123;</span><br><span class="line">    DESTDIR = $$PWD/../Bin/Debug</span><br><span class="line">    LIBS += $$PWD/../Bin/Debug/libUIElement.so</span><br><span class="line">    LIBS += $$PWD/../Bin/Debug/libPublicData.so</span><br><span class="line">    LIBS += $$PWD/../Bin/Debug/libAIModule.so</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#这句一定要放在上边逻辑的后边，因为上边重新指定了DESTDIR的路径</span><br><span class="line">QMAKE_RPATHDIR += $$DESTDIR</span><br><span class="line"></span><br><span class="line">HEADERS = \</span><br><span class="line">    mainwindow.h \</span><br><span class="line"></span><br><span class="line">SOURCES = \</span><br><span class="line">    main.cpp \</span><br><span class="line">    mainwindow.cpp</span><br><span class="line"></span><br><span class="line">RESOURCES += textedit.qrc</span><br><span class="line"></span><br><span class="line">FORMS += \</span><br><span class="line">    finddialog.ui</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在Linux下进行Qt开发时，习惯性的分了几个模块（1个主工程，3个共享动态库），编译通过了但运行时遇到了问题，虽然二进制可执行文件和动态库</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="C++" scheme="https://santajiang.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>2024.05社招面经</title>
    <link href="https://santajiang.github.io/article/9a4ee461.html"/>
    <id>https://santajiang.github.io/article/9a4ee461.html</id>
    <published>2024-06-14T07:09:28.000Z</published>
    <updated>2024-06-14T07:12:12.803Z</updated>
    
    <content type="html"><![CDATA[<p>全部都是实际面试中被问到的：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;全部都是实际面试中被问到的：&lt;/p&gt;
</summary>
      
    
    
    
    <category term="面试" scheme="https://santajiang.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="C++原生" scheme="https://santajiang.github.io/tags/C-%E5%8E%9F%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>C++原生int和string互换</title>
    <link href="https://santajiang.github.io/article/74ffeb25.html"/>
    <id>https://santajiang.github.io/article/74ffeb25.html</id>
    <published>2024-01-24T08:26:23.000Z</published>
    <updated>2024-01-26T02:13:56.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="int转string"><a href="#int转string" class="headerlink" title="int转string"></a>int转string</h3><p>在C++中将int类型的变量转换为字符串可以使用std::to_string()函数。下面是示例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1234567890</span>;</span><br><span class="line">    </span><br><span class="line">    string strNum = <span class="built_in">to_string</span>(num); <span class="comment">// 将int转换为string</span></span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;转换后的字符串为：&quot;</span> &lt;&lt; strNum &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string转int"><a href="#string转int" class="headerlink" title="string转int"></a>string转int</h3><p>在C++中将字符串转换为int类型可以使用std::stoi()函数。下面是示例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string strNum = <span class="string">&quot;1234567890&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num = <span class="built_in">stoi</span>(strNum); <span class="comment">// 将string转换为int</span></span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;转换后的整数为：&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="char-数字-转int数字"><a href="#char-数字-转int数字" class="headerlink" title="char(数字)转int数字"></a>char(数字)转int数字</h3><p>这里有个坑是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a = <span class="string">&#x27;2&#x27;</span>; </span><br><span class="line"><span class="keyword">int</span> n = (<span class="keyword">int</span>)a;</span><br><span class="line"><span class="comment">//这个时候n其实=50，不是2，是因为当 char 直接 赋给 int 时，实际上是把 char 变量的ASCII 码赋给 int类型，因此取出char 变量的数值不能通过直接转换成int的方法实现</span></span><br></pre></td></tr></table></figure><p>所以正确做法是，利用char变量使用 ASCII进行算术运算这一特征，可以得到一种间接计算获取数值的方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a = <span class="string">&#x27;2&#x27;</span>; </span><br><span class="line"><span class="keyword">int</span> n = a - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="comment">//这个时候n就=2了</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;int转string&quot;&gt;&lt;a href=&quot;#int转string&quot; class=&quot;headerlink&quot; title=&quot;int转string&quot;&gt;&lt;/a&gt;int转string&lt;/h3&gt;&lt;p&gt;在C++中将int类型的变量转换为字符串可以使用std::to_string</summary>
      
    
    
    
    <category term="基础知识" scheme="https://santajiang.github.io/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="C++原生" scheme="https://santajiang.github.io/tags/C-%E5%8E%9F%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>双映射问题</title>
    <link href="https://santajiang.github.io/article/8bff5ea8.html"/>
    <id>https://santajiang.github.io/article/8bff5ea8.html</id>
    <published>2024-01-17T08:52:48.000Z</published>
    <updated>2024-01-24T08:27:28.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>双射说明两个映射表互为映射关系，正反都可推</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isIsomorphic</span><span class="params">(string s, string t)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    map&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; t2s, s2t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) </span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">char</span> a = s[i], b = t[i];</span><br><span class="line">         <span class="keyword">if</span> (s2t.<span class="built_in">contains</span>(a) &amp;&amp; s2t[a] != b || t2s.<span class="built_in">contains</span>(b) &amp;&amp; t2s[b] != a)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      </span><br><span class="line">         s2t[a] = b;</span><br><span class="line">         t2s[b] = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;双射说明两个映射表互为映射关系，正反都可推&lt;/p&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="基础知识" scheme="https://santajiang.github.io/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="C++原生" scheme="https://santajiang.github.io/tags/C-%E5%8E%9F%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>std实现字符串分割</title>
    <link href="https://santajiang.github.io/article/6586823f.html"/>
    <id>https://santajiang.github.io/article/6586823f.html</id>
    <published>2024-01-15T08:11:54.000Z</published>
    <updated>2024-01-24T08:27:12.094Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天在刷leetcode题的时候发现c++原生和std并没有类似于QString的.split()功能，还需要自己实现，随用std的正则表达式实现了这个功能</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt; res;</span><br><span class="line"><span class="function">std::regex <span class="title">reg</span><span class="params">(<span class="string">&quot;\\s+&quot;</span>)</span></span>; <span class="comment">// 正则表达式,匹配空格 </span></span><br><span class="line"><span class="function">std::sregex_token_iterator <span class="title">pos</span><span class="params">(s.begin(), s.end(), reg, <span class="number">-1</span>)</span></span>;</span><br><span class="line"><span class="keyword">decltype</span>(pos) end;              <span class="comment">// 自动推导类型 </span></span><br><span class="line"><span class="keyword">for</span>(; pos != end; ++pos)</span><br><span class="line">&#123;</span><br><span class="line">    res.<span class="built_in">push_back</span>(pos-&gt;<span class="built_in">str</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;今天在刷leetcode题的时候发现c++原生和std并没有类似于QString的.split()功能，还需要自己实现，随用std的正则表达</summary>
      
    
    
    
    <category term="基础知识" scheme="https://santajiang.github.io/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="C++原生" scheme="https://santajiang.github.io/tags/C-%E5%8E%9F%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>2023年总结</title>
    <link href="https://santajiang.github.io/article/9b8a73a1.html"/>
    <id>https://santajiang.github.io/article/9b8a73a1.html</id>
    <published>2024-01-04T09:11:00.000Z</published>
    <updated>2024-01-08T01:20:06.981Z</updated>
    
    <content type="html"><![CDATA[<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>23年真的是不平凡的一年，发生了好多好多事，这篇回顾文写的持续时间也比较长，我怕到年底的时候不能完整的回忆起每件事</p><p>首先1月份搬家到了北辰时代大厦这边，不得不说风景是真的好，不光挨着鸟巢，上下班都路过鸟巢，工位也高大上了好多，甚至在工位上一扭头就能看到鸟巢风景，还解锁了大年二十八九下班路上，鸟巢公园空无一人的奇观；坏处肯定也是有的，通勤时间从35分钟变成了1小时20分钟，时间长了也麻木了；物价也高了很多，消费开支都高了</p><p>过年的时候两家终于见面了，老爸找了保定会馆，据说在这里的原因是“保证能定”;我对象在第二天也来我家串门吃饭，终于定了在柏润东方大酒店办婚礼</p><p>然后，年后回来上班，从3月份开始了一个大项目，持续到了7月底，前中期几乎每天都在加班，9点后走打车报销是常事，期间各种改需求，赶进度，动不动崩溃，过程很痛苦</p><p>同时我自己的人生大事也在同步推进：3月20号求婚，想了很多最后还是在出租屋里求婚了，期间还发生了趣事，本来照常点下班的对象下午意外撒了咖啡，又是个周五，对象就提前回来了，导致我没布置完就匆匆忙忙躲起来了；还是3月，逛婚博会定了北遇的婚纱；4月份婚纱照拍了，出片了，但是不满意，又约了重拍，同时定了婚庆公司；5月份重拍了婚纱照，5月21号订了婚；6月中旬出了婚纱照片的精修，两个人很满意，还跟着对象俩人玩了第一次剧本杀；7月份就是挑婚纱，最后定婚礼方案；8月份一直在备婚，很多很多事情，动不动就崩溃；8月26号，两个人办了婚礼，这可真是一辈子的大事，很开心</p><p>9月份两个人自驾去乌兰察布玩了，还住了帐篷，晚上还下大暴雨，两个人在帐篷里边看手机视频边吃小火锅，感觉太特别了，很难忘</p><p>以上的段落写在我23年9月份的时候，现在回看一下心态还真的是完全不同；接下来的段落是在24年1月初写的，后边的状况急转直下</p><p>10月份的时候就开始有消息说公司要整个搬到深圳，leader当时还比较乐观，说不太可能，我也觉得不太可能整个全搬到深圳，公司里有很多的老员工，光赔偿金都不够赔的  </p><p>后边部门就开始没活干了，一度到了要员工自己找活干的程度了，我明白这是研发领导跟leader可能有恩怨，连带一起打压我们部门了，申请的工作全都不让做  </p><p>12月初的时候，研发领导开大会，直接就说要进行搬家和大裁员，确实是挺让人意外的，但还是觉得可能动作不会那么快，而且裁也裁不到我，毕竟我的能力大家都是认可的  </p><p>后来我们一起去钢琴行看了电钢琴，花一万买了一架KAWAI CA401，我很喜欢，又可以重拾之前的爱好了，只是希望后续有足够的时间练琴，也能坚持下去  </p><p>月中的时候，某天晚上我照常下班坐昌平线地铁，从西二旗到沙河高教园的时候，突发事故了，当时我只感觉我整个人飞了出去，然后我摔到了某人的上边，我的上边也压着两三个人，挣扎着起来之后发现地铁撞车了，一片混乱，又经过了漫长的两个多小时的等待，我们全都从车上下来了，顺着地铁一路走回了西二旗地铁站，后又因为打不到车，手机又没电了，又徒步走到了新龙泽医院，最后还是玥玥从沙河高教园打车过来接我回去才得以回家的，有生之年竟然上了一次热搜，地铁事故这种超小概率事件能碰上也是神奇··  </p><p>12月末的时候，事情就急转直下了，先是各个部门大裁员，保定部门直接没了，然后就我们部门没动静，后来就是leader开会说可能裁一半，再到24年1月3号（昨天）的时候，leader私聊找我说我在裁员名单上了，事情才尘埃落定了  </p><h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><p>不知道说什么，现在脑袋其实乱糟糟的，被裁员肯定难过还是有的，但不被裁的话，说实话也干不下去了，没什么意义，还是挺想拿了赔偿休息一阵的，毕竟后边干几十年呢，想出去旅个游还要等放假，我放假别人也放假，人多物价也贵；但又很烦接下来的谈判过程，通过和各个同事的聊天过程后已经预感到了不是一个轻松的过程；还有拿到赔偿后，现在又是年底，过完年了之后找工作的情况也是未知数，还是有些焦虑的····总而言之言而总之，还是希望自己能整理好心情吧，努力把该做的事情做好，希望24年末回顾的时候，自己能有一个满意的结果，加油吧！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;23年真的是不平凡的一年，发生了好多好多事，这篇回顾文写的持续时间也比较长，我怕到年底的时候不能完整的回忆起每件事&lt;/p&gt;
&lt;p&gt;首先1月份</summary>
      
    
    
    
    <category term="感悟" scheme="https://santajiang.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="年度总结" scheme="https://santajiang.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Qt模态窗口点击窗外消失</title>
    <link href="https://santajiang.github.io/article/4a371b70.html"/>
    <id>https://santajiang.github.io/article/4a371b70.html</id>
    <published>2023-10-10T09:49:44.000Z</published>
    <updated>2023-10-12T07:30:19.424Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到个麻烦事，模态窗口、置顶、无父；要实现点窗口外关窗口功能，失焦事件之类的全部失效，查了好多后有了一个很好的解决方案：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setWindowFlags</span>(Qt::FramelessWindowHint | Qt::Popup | Qt::NoDropShadowWindowHint);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天遇到个麻烦事，模态窗口、置顶、无父；要实现点窗口外关窗口功能，失焦事件之类的全部失效，查了好多后有了一个很好的解决方案：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt防连点</title>
    <link href="https://santajiang.github.io/article/d2b5f7ee.html"/>
    <id>https://santajiang.github.io/article/d2b5f7ee.html</id>
    <published>2023-07-27T12:41:25.000Z</published>
    <updated>2023-07-27T12:47:02.420Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 避免连续点击</span></span><br><span class="line"><span class="keyword">static</span> DWORD tick1 = <span class="number">0</span>;</span><br><span class="line">DWORD tick2 = <span class="built_in">GetTickCount</span>();</span><br><span class="line"><span class="keyword">if</span> (tick2 - tick1 &gt; <span class="number">200</span>)</span><br><span class="line">&#123;</span><br><span class="line">    tick1 = tick2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="C++" scheme="https://santajiang.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Qt设置窗口居中显示</title>
    <link href="https://santajiang.github.io/article/29e34681.html"/>
    <id>https://santajiang.github.io/article/29e34681.html</id>
    <published>2023-07-12T06:24:01.000Z</published>
    <updated>2023-07-12T06:29:00.286Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移动窗体到屏幕中央</span></span><br><span class="line">QRect rect = m_pWidget-&gt;<span class="built_in">frameGeometry</span>();</span><br><span class="line">QScreen* screen = QGuiApplication::<span class="built_in">primaryScreen</span>();</span><br><span class="line">QPoint point = screen-&gt;availableGeometry.<span class="built_in">center</span>();</span><br><span class="line">rect.<span class="built_in">moveCenter</span>(point);</span><br><span class="line">m_pWidget-&gt;<span class="built_in">move</span>(rect.<span class="built_in">topLeft</span>());</span><br><span class="line">m_pWidget-&gt;<span class="built_in">show</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt限制软件某日期后不能使用</title>
    <link href="https://santajiang.github.io/article/a0b9096a.html"/>
    <id>https://santajiang.github.io/article/a0b9096a.html</id>
    <published>2023-07-12T06:23:42.000Z</published>
    <updated>2023-07-12T06:29:00.287Z</updated>
    
    <content type="html"><![CDATA[<p>在main.cpp里：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QDate <span class="title">overDate</span><span class="params">(<span class="number">2023</span>,<span class="number">6</span>,<span class="number">28</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> days = overDate.<span class="built_in">daysTo</span>(QDate::<span class="built_in">currentDate</span>());</span><br><span class="line"><span class="keyword">if</span>(days &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在main.cpp里：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt正则表达式筛手机号</title>
    <link href="https://santajiang.github.io/article/9fa9795d.html"/>
    <id>https://santajiang.github.io/article/9fa9795d.html</id>
    <published>2023-07-03T05:49:02.000Z</published>
    <updated>2023-07-03T05:51:48.715Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QRegExp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QRegExpValidator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsValidPhoneNumber</span><span class="params">(<span class="keyword">const</span> QString &amp; phoneNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QRegExp <span class="title">regx</span><span class="params">(<span class="string">&quot;^1([358][0-9]|4[579]|66|7[0135678]|9[89])[0-9]&#123;8&#125;$&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">QRegExpValidator <span class="title">regs</span><span class="params">(regx, <span class="number">0</span>)</span></span>;</span><br><span class="line">    QString pNum = phoneNum;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    QValidator::State res = regs.<span class="built_in">validate</span>(pNum, pos);</span><br><span class="line">    <span class="keyword">if</span> (QValidator::Acceptable == res) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="正则表达式" scheme="https://santajiang.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Qt快速转换路径(斜杠与反斜杠转换)</title>
    <link href="https://santajiang.github.io/article/c2e86a2f.html"/>
    <id>https://santajiang.github.io/article/c2e86a2f.html</id>
    <published>2023-05-16T11:58:08.000Z</published>
    <updated>2023-05-16T12:02:24.376Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>使用<code>QDir::fromNativeSeparators</code></p></li><li><p>示例：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QString path = <span class="string">&quot;C:\\temp/test.txt&quot;</span>;</span><br><span class="line">path = QDir::<span class="built_in">fromNativeSeparators</span>(path);</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:/temp/test.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;QDir::fromNativeSeparators&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt实现边框圆角图片</title>
    <link href="https://santajiang.github.io/article/577bc24c.html"/>
    <id>https://santajiang.github.io/article/577bc24c.html</id>
    <published>2023-05-09T11:09:21.000Z</published>
    <updated>2023-05-09T11:14:22.943Z</updated>
    
    <content type="html"><![CDATA[<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPixmap&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSize&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QBitmap&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainterPath&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    ui-&gt;label-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;background-color:transparent;&quot;</span></span><br><span class="line">                             <span class="string">&quot;border: 1px solid rgba(0,0,0,1);&quot;</span></span><br><span class="line">                             <span class="string">&quot;border-radius: 8px;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> w = ui-&gt;label-&gt;<span class="built_in">width</span>() - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> h = ui-&gt;label-&gt;<span class="built_in">height</span>() - <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QPixmap <span class="title">pixmapback</span><span class="params">(<span class="string">&quot;://images/test.jpeg&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">QPixmap <span class="title">pixmap</span><span class="params">(w,h)</span></span>;</span><br><span class="line">    pixmap.<span class="built_in">fill</span>(Qt::transparent);</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(&amp;pixmap)</span></span>;</span><br><span class="line">    painter.<span class="built_in">setRenderHints</span>(QPainter::Antialiasing | QPainter::SmoothPixmapTransform);</span><br><span class="line">    QPainterPath path;</span><br><span class="line">    path.<span class="built_in">addRoundedRect</span>(<span class="number">0</span>, <span class="number">0</span>, w, h,<span class="number">8</span>,<span class="number">8</span>);    <span class="comment">//绘制圆角</span></span><br><span class="line">    painter.<span class="built_in">setClipPath</span>(path);</span><br><span class="line">    painter.<span class="built_in">drawPixmap</span>(<span class="number">0</span>, <span class="number">0</span>, w, h, pixmapback);</span><br><span class="line"></span><br><span class="line">    ui-&gt;label-&gt;<span class="built_in">setPixmap</span>(pixmap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>不同DPI固定窗口位置显示探索</title>
    <link href="https://santajiang.github.io/article/36353022.html"/>
    <id>https://santajiang.github.io/article/36353022.html</id>
    <published>2023-02-20T07:26:01.000Z</published>
    <updated>2023-02-20T08:17:48.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近做项目，需求要求不管在什么DPI下，都要保证一个小窗口，显示在一个相对大屏固定位置的地方，误差要求很小。   </p><p>一开始我的思路是按比例设，Qt的坐标（0,0）在左上角，我就以屏幕宽度的90%，屏幕高度的80%，Move窗口，结果出现了意外的情况，右侧的窗口，在比例正确的情况下总是会有一部分跑到屏幕外边去，而且DPI越大跑的越多；经调查后发现了一些需要注意的点。  </p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>其实按比例设置xy坐标的做法是正确的，只是这个xy只定住了窗口的左上角坐标，DPI发生变化后，虽然我一直给窗口设置的150px*50px，其实相对于屏幕的显示大小，发生了变化，DPI越大，窗口相对于当前的屏幕就越大；所以对于相同位置的点，因为窗口变大了，show出来的窗口就会发生偏移。这里有两种解决思路：  </p><p>1.从右往左算出来距离，不要直接乘比例算，这样不管窗口的大小怎么变，窗口的最右侧永远也会空出来一段距离，只是这样算出来的点位置会发生一些偏移，无伤大雅</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">QRectF rect = QApplication::<span class="built_in">desktop</span>()-&gt;<span class="built_in">geometry</span>();</span><br><span class="line"><span class="keyword">int</span> nWidth = rect.<span class="built_in">width</span>();</span><br><span class="line"><span class="keyword">int</span> nHeight = rect.<span class="built_in">height</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//nWidth - nWidth*0.035 - toolBox-&gt;width() = 屏幕宽度-右侧要空出的间距-窗口本体的宽度</span></span><br><span class="line">toolBox-&gt;<span class="built_in">move</span>(nWidth - nWidth*<span class="number">0.035</span> - toolBox-&gt;<span class="built_in">width</span>(), nHeight*<span class="number">0.79</span>);</span><br><span class="line">toolBox-&gt;<span class="built_in">show</span>();</span><br><span class="line">toolBox-&gt;<span class="built_in">activateWindow</span>();</span><br></pre></td></tr></table></figure><p>2.对窗口也乘以比例，例如相对于3840px*2160px分辨率，窗口的大小是150px*50px，则当DPI为2.0时，分辨率就相当于1920px*1080px，那么窗口也要对应的➗2，才能保持相对位置不变</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ul><li>[DPI] 1.0    3840  2120</li><li>[DPI] 1.25   3072 1688</li><li>[DPI] 1.5     2560 1400</li><li>[DPI] 1.75   2194 1195</li><li>[DPI] 2.0     1920 1040</li><li>[DPI] 2.25   1707 920</li><li>[DPI] 2.5     1536  824</li><li>[DPI] 2.75    1396 764</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近做项目，需求要求不管在什么DPI下，都要保证一个小窗口，显示在一个相对大屏固定位置的地方，误差要求很小。   &lt;/p&gt;
&lt;p&gt;一开始我的</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="跨平台" scheme="https://santajiang.github.io/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>Qt跨平台路径表示法</title>
    <link href="https://santajiang.github.io/article/98434a1.html"/>
    <id>https://santajiang.github.io/article/98434a1.html</id>
    <published>2023-02-13T08:59:29.000Z</published>
    <updated>2023-02-13T09:03:31.626Z</updated>
    
    <content type="html"><![CDATA[<p>跨平台开发的时候，经常涉及到路径的表示问题，有单斜杠、双斜杠、双反斜杠等等，很容易出问题，所以直接用separator()方法代替斜杠即可，API原文：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QChar <span class="title">QDir::separator</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">Returns the native directory separator: <span class="string">&quot;/&quot;</span> under Unix and <span class="string">&quot;\&quot; under Windows.</span></span></span><br><span class="line"><span class="string"><span class="function">You do not need to use this function to build file paths. If you always use &quot;</span>/<span class="string">&quot;, Qt will translate your paths to conform to the underlying operating system. If you want to display paths to the user using their operating system&#x27;s separator use toNativeSeparators().</span></span></span><br><span class="line"><span class="string"><span class="function">See also listSeparator().</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;跨平台开发的时候，经常涉及到路径的表示问题，有单斜杠、双斜杠、双反斜杠等等，很容易出问题，所以直接用separator()方法代替斜杠即可，API原文：  &lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="跨平台" scheme="https://santajiang.github.io/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>2022年总结</title>
    <link href="https://santajiang.github.io/article/7448189f.html"/>
    <id>https://santajiang.github.io/article/7448189f.html</id>
    <published>2023-01-05T15:47:15.000Z</published>
    <updated>2023-01-05T15:48:09.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>2023年的第3天，写了这个回顾文章  </p><p>写这篇文章之前先回顾了一下21年的总结，总的来说22年跟预想的还是有很大变化的。  </p><p>首先，3月份预期的涨薪，名额都已经有我了，但因为新冠疫情公司效益不好，最后还是没涨，确实挺失望的；  </p><p>确实找到了新住处，3月底进行了一次搬家，这次搬到了更远的北六环，到公司的通勤时间也从30分钟变成了一个半小时，但房租着实便宜了不少，只是周边的环境过于荒凉，像一座孤岛，不知道今年房子到期后，会不会搬到沙河县城去，那里比现在住的这还是要热闹一些的；  </p><p>4月份买了一个富士微单相机，我很喜欢，拿着它拍了不少照片，也觉得多拍照片总归是好的，多年后这些照片就是宝贵的回忆；  </p><p>5月份还去了对象家里，第一次见了对方父母，本来预计今年年底两家见个面谈个订婚什么的，因为疫情也没能回去；</p><p>9月份我的猫，布丁，死了。因为反反复复的尿闭，也因为搬到了这里，附近并没有什么宠物医院，我跟对象焦急的想办法治它的时候，膀胱破裂很快就死了，我跟对象哭的哇哇的，我在一个大雨夜把它埋在了一所大学旁边的绿化带里，带着它喜欢的猫罐头和猫条，我觉得我这辈子都忘不了当时的场景；  </p><p>今年还因为新冠疫情，林林总总的在家居家办公了一个半月，到最后年底放开了，自己也感染了，还挺难受，又高烧又各种症状的，过了一个星期也算是挺过来了，对象照顾我结果把她也给传染了；    </p><p>预期的跳槽，也并没有跳，今年的形势比预想的还要严峻，新冠疫情搞的经济不行，各个大厂纷纷在裁员降薪，而且我自己今年有点偷懒，也没有怎么努力准备面试的东西，想想就先算了，稳稳再说（也因为这家公司的福利比较好，工作强度不大，休息时间多），23年会不会跳槽，说实话心里还没有一个定数，想着先总结一下以往几年工作的一些成果，哪怕说后边跳，手里也能拿出来一些东西，不至于工作了好几年，什么都没留下来；  </p><p>关于旅游，今年哪都没去玩，22年确实是没有意义的一年，我觉得多年后我也不想回忆起今年。  </p><h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><p>今年写的有点琐碎，感觉情绪整体也没有去年那么好，发生了好多事，疫情又反反复复的，闹到最后自己还是感染了；另一方面自己岁数也越来越大了，再过两年就30了，钱也没挣多少，有种莫名的焦虑。后边还有求婚，订婚，婚礼，买房，等等，每每想到就很焦虑，再加上自己程序员的职业特性，今年总结起来就俩字：<strong>焦虑</strong>  </p><p>对于2023年的期望，还是希望生活能逐渐的变好吧，通知说公司这周五要搬家到奥体公园旁边，挨着鸟巢，也不知道去那边了会有什么样新的展开；然后也希望跟对象的一系列事情也都能办完，顺利的求婚，顺利的订婚，顺利的婚礼    </p><p>虽然预料到一堆事压着，还是得撑着，一件一件给办了，<strong>加油吧</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;2023年的第3天，写了这个回顾文章  &lt;/p&gt;
&lt;p&gt;写这篇文章之前先回顾了一下21年的总结，总的来说22年跟预想的还是有很大变化的。  </summary>
      
    
    
    
    <category term="感悟" scheme="https://santajiang.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="年度总结" scheme="https://santajiang.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>判断Linux下程序是否在运行</title>
    <link href="https://santajiang.github.io/article/c421f6f2.html"/>
    <id>https://santajiang.github.io/article/c421f6f2.html</id>
    <published>2022-11-22T02:13:24.000Z</published>
    <updated>2022-11-22T02:23:40.713Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这里提供两种可以判断Linux下某程序是否正在运行的方法，两种都是通过执行终端命令，获取结果并判断来实现的</p><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkProgramRun</span><span class="params">(<span class="keyword">const</span> QString &amp; ProcessName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString LinuxProcessName = ProcessName;</span><br><span class="line"></span><br><span class="line">    QProcess process;</span><br><span class="line">    process.<span class="built_in">setReadChannel</span>(QProcess::StandardOutput);</span><br><span class="line"></span><br><span class="line">    process.<span class="built_in">start</span>(<span class="string">&quot;ps -ef&quot;</span>);</span><br><span class="line">    process.<span class="built_in">waitForFinished</span>();</span><br><span class="line"></span><br><span class="line">    QByteArray bytes = process.<span class="built_in">readAll</span>();</span><br><span class="line">    process.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* ch;</span><br><span class="line">    QByteArray ba = LinuxProcessName.<span class="built_in">toLatin1</span>(); <span class="comment">//must</span></span><br><span class="line">    ch = ba.<span class="built_in">data</span>();</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(bytes.<span class="built_in">contains</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>注：这里用到了grep，如果直接用QProcess的start方法执行命令是获取不到grep筛选后的结果的，暂不知原因，这里采用执行shell和echo打印相结合的方法可以成功打印出结果，但还是有小问题，结果是两行，这里只能出现一行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkProgramRun</span><span class="params">(<span class="keyword">const</span> QString &amp; ProcessName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString LinuxProcessName = ProcessName;</span><br><span class="line"></span><br><span class="line">    QProcess process;</span><br><span class="line">    QStringList args;</span><br><span class="line">    args&lt;&lt;<span class="string">&quot;-c&quot;</span>;</span><br><span class="line">    QString strCommnd = <span class="built_in">QString</span>(<span class="string">&quot;echo $(ps -ef | grep %1 | grep -v grep)&quot;</span>).<span class="built_in">arg</span>(LinuxProcessName);</span><br><span class="line">    args&lt;&lt;strCommnd;</span><br><span class="line"></span><br><span class="line">    process.<span class="built_in">start</span>(<span class="string">&quot;sh&quot;</span>,args);</span><br><span class="line">    process.<span class="built_in">waitForFinished</span>();</span><br><span class="line"></span><br><span class="line">    QString programs = process.<span class="built_in">readAllStandardOutput</span>();</span><br><span class="line">    process.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(programs.<span class="built_in">contains</span>(LinuxProcessName))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这里提供两种可以判断Linux下某程序是否正在运行的方法，两种都是通过执行终端命令，获取结果并判断来实现的&lt;/p&gt;
&lt;h3 id=&quot;方法1&quot;</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="Linux" scheme="https://santajiang.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Qt下调用系统功能</title>
    <link href="https://santajiang.github.io/article/b54bf0c4.html"/>
    <id>https://santajiang.github.io/article/b54bf0c4.html</id>
    <published>2022-11-02T06:36:41.000Z</published>
    <updated>2022-11-02T07:30:45.680Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><strong>1.关闭窗口</strong><br>本质上就是发组合键：Alt+F4 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">closeWindow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined Q_OS_WIN</span></span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_LMENU,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_F4,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_F4,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_LMENU,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined Q_OS_LINUX</span></span><br><span class="line">    Display *disp = <span class="built_in">XOpenDisplay</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Alt_L), True, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_F4), True, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_F4), <span class="literal">false</span>, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Alt_L), <span class="literal">false</span>, CurrentTime);</span><br><span class="line">    <span class="built_in">XCloseDisplay</span>(disp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.显示桌面</strong></p><p>本质上就是发组合键：Win+D</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showDesktop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined Q_OS_WIN</span></span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_LWIN,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(<span class="number">68</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(<span class="number">68</span>,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_LWIN,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined Q_OS_LINUX</span></span><br><span class="line">    Display *disp = <span class="built_in">XOpenDisplay</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Super_L), True, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_D), True, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_D), <span class="literal">false</span>, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Super_L), <span class="literal">false</span>, CurrentTime);</span><br><span class="line">    <span class="built_in">XCloseDisplay</span>(disp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.Page Up/Page Down</strong></p><p>本质上就是模拟按下对应的键</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pageUp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined Q_OS_WIN</span></span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_PRIOR,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_PRIOR,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined Q_OS_LINUX</span></span><br><span class="line">    Display *disp = <span class="built_in">XOpenDisplay</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Page_Up), True, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Page_Up), <span class="literal">false</span>, CurrentTime);</span><br><span class="line">    <span class="built_in">XCloseDisplay</span>(disp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pageDown</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined Q_OS_WIN</span></span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_NEXT,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_NEXT,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined Q_OS_LINUX</span></span><br><span class="line">    Display *disp = <span class="built_in">XOpenDisplay</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Next), True, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Next), <span class="literal">false</span>, CurrentTime);</span><br><span class="line">    <span class="built_in">XCloseDisplay</span>(disp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.多任务</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showDesktop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined Q_OS_WIN</span></span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_CONTROL,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_LMENU,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_TAB,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_TAB,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_CONTROL,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">keybd_event</span>(VK_LMENU,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined Q_OS_LINUX</span></span><br><span class="line">    Display *disp = <span class="built_in">XOpenDisplay</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Super_L), True, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_W), True, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_W), <span class="literal">false</span>, CurrentTime);</span><br><span class="line">    <span class="built_in">XTestFakeKeyEvent</span>(disp, <span class="built_in">XKeysymToKeycode</span>(disp,XK_Super_L), <span class="literal">false</span>, CurrentTime);</span><br><span class="line">    <span class="built_in">XCloseDisplay</span>(disp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1.关闭窗口&lt;/strong&gt;&lt;br&gt;本质上就是发组合键：Alt+F4 &lt;/p&gt;
&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="系统功能" scheme="https://santajiang.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Qt下的Hook</title>
    <link href="https://santajiang.github.io/article/4aa62fe6.html"/>
    <id>https://santajiang.github.io/article/4aa62fe6.html</id>
    <published>2022-10-19T16:00:00.000Z</published>
    <updated>2022-10-20T05:18:31.490Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>底层hook（钩子）相关逻辑；包含键位和各种组合键的捕获方法，及与Qt类进行交互的逻辑，特此记录</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>源文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">HHOOK keyHook= <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//keyboard hook</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">keyProc</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    KBDLLHOOKSTRUCT *pkbhs = (KBDLLHOOKSTRUCT *) lParam;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(nCode == HC_ACTION)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pkbhs-&gt;vkCode == VK_ESCAPE &amp;&amp; <span class="built_in">GetAsyncKeyState</span>(VK_CONTROL)&amp; <span class="number">0x8000</span> &amp;&amp; <span class="built_in">GetAsyncKeyState</span>(VK_SHIFT)&amp;<span class="number">0x8000</span>) <span class="comment">//&quot;Ctrl+Shift+Esc&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pkbhs-&gt;vkCode == VK_ESCAPE &amp;&amp; <span class="built_in">GetAsyncKeyState</span>(VK_CONTROL) &amp; <span class="number">0x8000</span>)  <span class="comment">//&quot;Ctrl+Esc&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pkbhs-&gt;vkCode == VK_TAB &amp;&amp; pkbhs-&gt;flags &amp; LLKHF_ALTDOWN )    <span class="comment">//&quot;Alt+Tab&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pkbhs-&gt;vkCode == VK_ESCAPE &amp;&amp; pkbhs-&gt;flags &amp;LLKHF_ALTDOWN)  <span class="comment">//&quot;Alt+Esc&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pkbhs-&gt;vkCode == VK_F4 &amp;&amp; pkbhs-&gt;flags &amp; LLKHF_ALTDOWN)  <span class="comment">//&quot;Alt+F4&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYDOWN &amp;&amp; pkbhs-&gt;vkCode == VK_SNAPSHOT)  <span class="comment">//&quot;Prtic&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYUP &amp;&amp; pkbhs-&gt;vkCode == VK_SNAPSHOT)</span><br><span class="line">        &#123;</span><br><span class="line">            MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYDOWN &amp;&amp; pkbhs-&gt;vkCode == VK_LWIN)  <span class="comment">// &quot;LeftWin&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYUP &amp;&amp; pkbhs-&gt;vkCode == VK_LWIN)</span><br><span class="line">        &#123;</span><br><span class="line">            MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYDOWN &amp;&amp; pkbhs-&gt;vkCode == VK_RWIN)  <span class="comment">//&quot;RightWin&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYUP &amp;&amp; pkbhs-&gt;vkCode == VK_RWIN)</span><br><span class="line">        &#123;</span><br><span class="line">            MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYDOWN &amp;&amp; pkbhs-&gt;vkCode == VK_TAB)  <span class="comment">//&quot;TAB&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYUP &amp;&amp; pkbhs-&gt;vkCode == VK_TAB)</span><br><span class="line">        &#123;</span><br><span class="line">            MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(wParam == WM_KEYDOWN &amp;&amp; pkbhs-&gt;vkCode == <span class="number">68</span>)    <span class="comment">//&quot;Win+D&quot;</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">GetKeyState</span>(VK_LWIN))</span><br><span class="line">            &#123;</span><br><span class="line">                MainWindow::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">todo</span>();</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CallNextHookEx</span>(keyHook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hook</span><span class="params">(<span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//registered hooks</span></span><br><span class="line">        keyHook = <span class="built_in">SetWindowsHookEx</span>(WH_KEYBOARD_LL,keyProc,<span class="built_in">GetModuleHandle</span>(<span class="literal">nullptr</span>),<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">UnhookWindowsHookEx</span>(keyHook);</span><br><span class="line">        keyHook= <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MainWindow* instance;</span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent) : <span class="built_in">QMainWindow</span>(parent),<span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    instance = <span class="keyword">this</span>;</span><br><span class="line">    <span class="built_in">hook</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">hook</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">MainWindow *<span class="title">MainWindow::getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;底层hook（钩子）相关逻辑；包含键位和各种组合键的捕获方法，及与Qt类进行交互的逻辑，特此记录&lt;/p&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="Hook" scheme="https://santajiang.github.io/tags/Hook/"/>
    
  </entry>
  
  <entry>
    <title>信号槽的特殊声明</title>
    <link href="https://santajiang.github.io/article/a204f63f.html"/>
    <id>https://santajiang.github.io/article/a204f63f.html</id>
    <published>2022-09-27T08:34:10.000Z</published>
    <updated>2023-06-26T02:16:33.368Z</updated>
    
    <content type="html"><![CDATA[<p>适用于槽函数逻辑较简单无须单独列出的情况：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QTimer* timer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">connect</span>(timer, &amp;QTimer::timeout, [ = ]()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QTimer::<span class="built_in">singleShot</span>(<span class="number">300</span>, <span class="keyword">this</span> , [ = ]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;适用于槽函数逻辑较简单无须单独列出的情况：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="开发笔记" scheme="https://santajiang.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="https://santajiang.github.io/tags/Qt/"/>
    
    <category term="信号槽" scheme="https://santajiang.github.io/tags/%E4%BF%A1%E5%8F%B7%E6%A7%BD/"/>
    
  </entry>
  
</feed>
